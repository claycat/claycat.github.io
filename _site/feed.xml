<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-12T23:32:29+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Claycat</title><subtitle>Backend developer dreamtree.</subtitle><entry><title type="html">티케팅 시스템 구현에서의 동시성 문제 : 원인</title><link href="http://localhost:4000/tiketeer/concurrency/" rel="alternate" type="text/html" title="티케팅 시스템 구현에서의 동시성 문제 : 원인" /><published>2024-04-02T12:00:00+09:00</published><updated>2024-04-02T12:00:00+09:00</updated><id>http://localhost:4000/tiketeer/concurrency</id><content type="html" xml:base="http://localhost:4000/tiketeer/concurrency/"><![CDATA[<h1 id="개요">개요</h1>]]></content><author><name></name></author><category term="Tiketeer" /><category term="spring" /><category term="concurrency" /><category term="tiketeer" /><summary type="html"><![CDATA[개요]]></summary></entry><entry><title type="html">스프링 코드 아키텍처</title><link href="http://localhost:4000/tiketeer/architecture/" rel="alternate" type="text/html" title="스프링 코드 아키텍처" /><published>2024-03-25T12:00:00+09:00</published><updated>2024-03-25T12:00:00+09:00</updated><id>http://localhost:4000/tiketeer/architecture</id><content type="html" xml:base="http://localhost:4000/tiketeer/architecture/"><![CDATA[<p>작성자 : <a href="https://github.com/claycat">Claycat</a></p>

<h2 id="개요">개요</h2>

<h3 id="여러분들의-백엔드-프로젝트-아키텍처는-어떤가요">여러분들의 백엔드 프로젝트 아키텍처는 어떤가요?</h3>

<p>이번에 지인들과 함께 Java/스프링 기반의 사이드 프로젝트를 진행하고 있습니다.<br />
프로젝트를 진행하던 중 초기 아키텍처 및 디렉토리 구조에 대해서 많은 고민이 있었는데요.<br />
결정 과정에 대해서 소개해 보려고 합니다.</p>

<p>해당 프로젝트의 Github <a href="https://github.com/Tiketeer/Tiketeer-BE">여기</a> 입니다.</p>

<h2 id="서론">서론</h2>

<p>이전에 진행했던 프로젝트들은 전통적인 Layered Architecture로 이루어졌습니다.</p>

<p><img src="/images/../../assets/images/2024-04-02-21-08-08.png" alt="" /></p>

<p>일반적으로 Controller, Service, Repository 세개의 레이어로 구성되어있습니다.
Controller에서는 Service에 의존하고, Service에서는 Repository에 의존하는 방식입니다.</p>

<p>조금 더 구체적인 예시를 들면 다음과 같습니다.</p>

<p><img src="/images/../../assets/images/2024-04-02-21-08-54.png" alt="" /></p>

<p>해당 방식은 소규모의 프로젝트에서는 문제가 없었지만,<br />
다양한 유틸리티 메소드와 비즈니스 로직이 많아지고, API 엔드포인트들이 많아질수록 서비스단의 코드가 비대해졌습니다.<br />
서비스 코드가 몇백줄을 넘어가면서 유지보수성은 떨어지고 가독성 또한 낮아졌습니다.</p>

<h2 id="원인">원인</h2>

<p>이 문제의 원인은 컨트롤러 - 서비스간의 1:1 관계 때문이라고 분석했습니다.
위 Member 예제처럼 MemberController - MemberService로 연관되어있는 경우입니다.<br />
이 경우, MemberService는 MemberController의 모든 엔드포인트를 메소드로 구현해야 합니다.<br />
Member에 대한 모든 비즈니스 로직을 포함할 수 밖에 없고, 거대한 테스트 코드는 덤입니다.</p>

<p>저희는 해당 도메인을 단 하나의 서비스 객체로 나타내는 구조는 거대한 객체를 유발하고,<br />
가독성과 유지보수성이 떨어지며,<br />
객체지향적으로도 너무 많은 책임을 갖는 좋지 않은 구조라고 판단하였습니다.</p>

<h2 id="대안">대안</h2>

<p>해당 문제를 어떻게 해결할 수 있을지 회의를 하였고, 몇가지 제안들이 있었습니다.</p>

<ol>
  <li>
    <p>CrudService</p>

    <ul>
      <li>✋ 비대한 서비스 코드를 줄일 수 있도록 CRUD관련 엔드포인트들만 별도로 처리하는 서비스 객체를 사용하자!</li>
    </ul>
  </li>
  <li>
    <p>Hexagonal Architecture &amp; Clean Architecture</p>

    <ul>
      <li>✋ 익숙한 계층 아키텍처 대신 새로운 아키텍처를 도입해서 사용하자!</li>
    </ul>
  </li>
  <li>
    <p>DDD의 아이디어 채용 - UseCase에 중점을 두자</p>

    <ul>
      <li>✋ 꼭 하나의 서비스가 여러개의 엔드포인트를 처리해야 할까?<br />
하나의 엔드포인트에 대한 하나의 서비스(유즈케이스)로서 대응하는건 어떨까?</li>
    </ul>
  </li>
</ol>

<h2 id="논의">논의</h2>

<ol>
  <li>
    <p>CrudService</p>

    <ul>
      <li>🙆 비대한 서비스 코드의 부담을 일부분 덜어줄 수 있다는 것은 동의.
        <ul>
          <li>🙅 하지만 결국 본질적인 문제를 해결하는것은 아니다.</li>
          <li>🙅 CRUD이외의 엔드포인트가 다수 추가된다면 결국 비대해지는것은 마찬가지</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Hexagonal &amp; Clean Architecture</p>

    <ul>
      <li>기존 계층구조로 구성된 코드를 모두 뒤엎어야 함
        <ul>
          <li>🙅 참고할 수 있는 정석적인 자료가 부재하며, 참고자료마다 구현방식이 모두 다름</li>
        </ul>
      </li>
      <li>🙆 Ports &amp; Adapter를 통해 외부 입력과 출력에 대해서 독립성을 확보할 수 있다
        <ul>
          <li>🙅 in/out에 대한 port 및 adapter를 모두 작성해야 하는 불편함이 존재</li>
          <li>🙅 사이드 프로젝트의 규모상 웹 요청방식은 HTTP이외가 추가되지 않을 것이며,<br />
마찬가지로 영속성 툴 또한 메인 DB (MySQL)에서 추가되지 않을 것인데, 오버엔지니어링이 아닐까</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>UseCase 중심</p>
    <ul>
      <li>🙆 익숙한 편이며, 서비스를 잘게 쪼갤 수 있다.</li>
      <li>🙅 결국 모든 엔드포인트에 대해서 대응하는 유즈케이스 객체가 만들어질텐데, 너무 많아지지 않을까?
        <ul>
          <li>🙆 어차피 작업중인 유즈케이스만 보게 될 것</li>
          <li>🙆 동시에 여러 유즈케이스를 보는 상황이 온다면 의존성 문제가 생긴게 아닐까</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="결론">결론</h2>

<p>논의 결과, 저희는 UseCase를 중심으로 한, 세분화된 서비스 객체의 계층구조로 결정하였습니다.</p>

<p>결론은 다음과 같습니다.</p>

<ul>
  <li>
    <p>컨트롤러는 기존과 동일한 역할을 수행하고, 도메인별로 분리합니다.</p>

    <ul>
      <li>API 엔드포인트 상
        <ul>
          <li>/members/** -&gt; MemberController</li>
          <li>/ticketings/** -&gt; TicketingController</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>기존 서비스를 메소드별로 UseCase로 나누어 별도의 객체로 분리합니다.</p>
    <ul>
      <li>MemberService 하위의
        <ul>
          <li>memberService.login -&gt; LoginUseCase</li>
          <li>memberService.register -&gt; RegisterUseCase</li>
          <li>memberService.logout -&gt; LogoutUseCase</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>코드를 살펴보면 다음과 같습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//편의상 주입 생략</span>

<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>

	<span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/register"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">ApiResponse</span><span class="o">&lt;</span><span class="nc">MemberRegisterResponseDto</span><span class="o">&gt;</span> <span class="nf">registerMember</span><span class="o">(</span>
		<span class="kd">final</span> <span class="nd">@Valid</span> <span class="nd">@RequestBody</span> <span class="nc">MemberRegisterRequestDto</span> <span class="n">registerMemberDto</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">ApiResponse</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span>
			<span class="nc">MemberRegisterResponseDto</span><span class="o">.</span><span class="na">toDto</span><span class="o">(</span><span class="n">memberRegisterUseCase</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">MemberRegisterCommandDto</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
				<span class="o">.</span><span class="na">email</span><span class="o">(</span><span class="n">registerMemberDto</span><span class="o">.</span><span class="na">getEmail</span><span class="o">())</span>
				<span class="o">.</span><span class="na">isSeller</span><span class="o">(</span><span class="n">registerMemberDto</span><span class="o">.</span><span class="na">getIsSeller</span><span class="o">())</span>
				<span class="o">.</span><span class="na">build</span><span class="o">()</span>
			<span class="o">))</span>
		<span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@PostMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">"/password-reset/mail"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">sendPasswordChangeEmail</span><span class="o">()</span> <span class="o">{</span>
		<span class="kt">var</span> <span class="n">email</span> <span class="o">=</span> <span class="n">securityContextHelper</span><span class="o">.</span><span class="na">getEmailInToken</span><span class="o">();</span>
		<span class="n">sendPasswordChangeEmailUseCase</span><span class="o">.</span><span class="na">sendEmail</span><span class="o">(</span>
			<span class="nc">SendPwdChangeEmailCommandDto</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">email</span><span class="o">(</span><span class="n">email</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
		<span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="nd">@PostMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">"/{memberId}/points"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">ApiResponse</span><span class="o">&lt;</span><span class="nc">ChargePointResponseDto</span><span class="o">&gt;&gt;</span> <span class="nf">chargePoint</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">memberId</span><span class="o">,</span>
		<span class="nd">@Valid</span> <span class="nd">@RequestBody</span> <span class="nc">ChargePointRequestDto</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">var</span> <span class="n">email</span> <span class="o">=</span> <span class="n">securityContextHelper</span><span class="o">.</span><span class="na">getEmailInToken</span><span class="o">();</span>
		<span class="kt">var</span> <span class="n">totalPoint</span> <span class="o">=</span> <span class="n">chargeMemberPointUseCase</span><span class="o">.</span><span class="na">chargePoint</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">convertToCommandDto</span><span class="o">(</span><span class="n">memberId</span><span class="o">,</span> <span class="n">email</span><span class="o">))</span>
			<span class="o">.</span><span class="na">getTotalPoint</span><span class="o">();</span>
		<span class="kt">var</span> <span class="n">result</span> <span class="o">=</span> <span class="nc">ChargePointResponseDto</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">totalPoint</span><span class="o">(</span><span class="n">totalPoint</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
		<span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="nc">ApiResponse</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="n">result</span><span class="o">));</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="재사용성과-의존성">재사용성과 의존성</h2>

<p>해당 방식을 논의하던 중, 여러 유즈케이스에서 공통적으로 의존하는 로직이나 모듈에 대한 지적이 있었습니다.<br />
공통적인 로직을 처리할 때는 ***Service라는 네이밍으로 적절한 추상화와 객체지향적 센스를 발휘하여 사용하기로 정하였습니다.</p>

<p>예시를 살펴보면 다음과 같습니다.</p>

<p>구매자의 “구매목록”을 담당하는 Purchase 도메인 내부의 생성 및 삭제 유즈 케이스입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CreatePurchaseUseCase</span> <span class="o">{</span>

	<span class="nd">@Transactional</span>
	<span class="kd">public</span> <span class="nc">CreatePurchaseResultDto</span> <span class="nf">createPurchase</span><span class="o">(</span><span class="nc">CreatePurchaseCommandDto</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">//PurchaseService</span>
		<span class="n">purchaseService</span><span class="o">.</span><span class="na">validateTicketingSalePeriod</span><span class="o">(</span><span class="n">ticketingId</span><span class="o">,</span> <span class="n">command</span><span class="o">.</span><span class="na">getCommandCreatedAt</span><span class="o">());</span>

		<span class="kt">var</span> <span class="n">newPurchase</span> <span class="o">=</span> <span class="n">purchaseRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="nc">Purchase</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">member</span><span class="o">(</span><span class="n">member</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
		<span class="kt">var</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">ticketRepository</span><span class="o">.</span><span class="na">findByTicketingIdAndPurchaseIsNullOrderById</span><span class="o">(</span>
			<span class="n">ticketingId</span><span class="o">,</span> <span class="nc">Limit</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">count</span><span class="o">));</span>

		<span class="k">if</span> <span class="o">(</span><span class="n">tickets</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">NotEnoughTicketException</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="n">tickets</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">ticket</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="n">ticket</span><span class="o">.</span><span class="na">setPurchase</span><span class="o">(</span><span class="n">newPurchase</span><span class="o">);</span>
		<span class="o">});</span>

		<span class="k">return</span> <span class="nc">CreatePurchaseResultDto</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
			<span class="o">.</span><span class="na">purchaseId</span><span class="o">(</span><span class="n">newPurchase</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>
			<span class="o">.</span><span class="na">createdAt</span><span class="o">(</span><span class="n">newPurchase</span><span class="o">.</span><span class="na">getCreatedAt</span><span class="o">())</span>
			<span class="o">.</span><span class="na">build</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>


<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeletePurchaseTicketsUseCase</span> <span class="o">{</span>

	<span class="nd">@Transactional</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">deletePurchaseTickets</span><span class="o">(</span><span class="nc">DeletePurchaseTicketsCommandDto</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">var</span> <span class="n">purchase</span> <span class="o">=</span> <span class="n">purchaseRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">getPurchaseId</span><span class="o">()).</span><span class="na">orElseThrow</span><span class="o">(</span>
			<span class="nl">PurchaseNotFoundException:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>
		<span class="kt">var</span> <span class="n">ticketsUnderPurchase</span> <span class="o">=</span> <span class="n">purchaseService</span><span class="o">.</span><span class="na">findTicketsUnderPurchase</span><span class="o">(</span><span class="n">purchase</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
		<span class="kt">var</span> <span class="n">ticketsToRefund</span> <span class="o">=</span> <span class="n">ticketRepository</span><span class="o">.</span><span class="na">findAllById</span><span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">getTicketIds</span><span class="o">());</span>
		<span class="kt">var</span> <span class="n">ticketing</span> <span class="o">=</span> <span class="n">ticketsUnderPurchase</span><span class="o">.</span><span class="na">getFirst</span><span class="o">().</span><span class="na">getTicketing</span><span class="o">();</span>

        <span class="c1">//PurchaseService</span>
		<span class="n">purchaseService</span><span class="o">.</span><span class="na">validatePurchaseOwnership</span><span class="o">(</span><span class="n">purchase</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">command</span><span class="o">.</span><span class="na">getMemberEmail</span><span class="o">());</span>
		<span class="n">purchaseService</span><span class="o">.</span><span class="na">validateTicketingSalePeriod</span><span class="o">(</span><span class="n">ticketing</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">command</span><span class="o">.</span><span class="na">getCommandCreatedAt</span><span class="o">());</span>

		<span class="kt">var</span> <span class="n">ticketIdUnderPurchase</span> <span class="o">=</span> <span class="n">ticketsUnderPurchase</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="nl">Ticket:</span><span class="o">:</span><span class="n">getId</span><span class="o">).</span><span class="na">toList</span><span class="o">();</span>
		<span class="nc">AtomicInteger</span> <span class="n">numOfDeletedTicket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AtomicInteger</span><span class="o">();</span>
		<span class="n">ticketsToRefund</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">ticket</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">ticketIdUnderPurchase</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">ticket</span><span class="o">.</span><span class="na">getId</span><span class="o">()))</span> <span class="o">{</span>
				<span class="n">ticket</span><span class="o">.</span><span class="na">setPurchase</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
				<span class="n">numOfDeletedTicket</span><span class="o">.</span><span class="na">getAndIncrement</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">});</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">numOfDeletedTicket</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">==</span> <span class="n">ticketsUnderPurchase</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">purchaseRepository</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">purchase</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>두가지 유즈케이스 모두 “구매”에 대한 Validation을 하는 공통 로직에 의존하고 있기 때문에<br />
해당 로직은 PurchaseService에 위임하였습니다.</p>

<p>다이어그램으로 살펴보면 다음과 같습니다.</p>

<p><img src="/images/../../assets/images/2024-04-02-21-09-47.png" alt="" /></p>

<p>이를 통해 공통 로직과 의존도를 분리할 수 있었습니다.</p>

<h2 id="후기">후기</h2>

<p>개인적으로 더이상 거대한 Service 객체를 보지 않아도 되는 면에서 가독성만큼은 훨씬 낫다고 생각합니다.
하나의 유즈케이스에 대해서만 집중해도 되니 유틸리티 메소드에 대한 의존성 관리도 쾌적해졌다고 느꼈습니다.<br />
이전에 사용하던 계층 구조와 선택하라고 한다면 분명 현재를 고를 것입니다.<br />
다만 우려되거나 아쉬운 부분 또한 존재합니다.</p>

<p>특히 우려되는 점은 서비스에 대한 오염입니다.<br />
적절한 책임의 분리를 하지 않고 모든 유틸리티 메소드들을 밀어넣는 용도로 XXXService를 사용한다면<br />
결국 재사용성이 떨어지는 거대객체가 될 확률이 높습니다.</p>

<p>이 글을 작성하면서 보니, 위 언급된 이미지에서의 PurchaseService 또한 Validation과 Find의 유틸리티 책임이 혼합되어있습니다.<br />
PurchaseValidationService와 PurchaseFindService로 쪼개는게 더 적절할 수도 있습니다.</p>

<p>아쉬운 부분은 Hexagonal 과 Clean Architecture, Domain Driven Design등에 대해서 조금 더 깊은 이해를 했거나<br />
경험이 있었다면 더 좋은 아키텍처가 있을 수도 있다는 것이었습니다.<br />
해당 부분은 사이드 프로젝트를 마무리한다면 깊게 한번 다시 탐구해보도록 하겠습니다.</p>

<p>감사합니다.</p>]]></content><author><name></name></author><category term="Tiketeer" /><category term="spring" /><category term="tiketeer" /><summary type="html"><![CDATA[작성자 : Claycat 개요 여러분들의 백엔드 프로젝트 아키텍처는 어떤가요? 이번에 지인들과 함께 Java/스프링 기반의 사이드 프로젝트를 진행하고 있습니다. 프로젝트를 진행하던 중 초기 아키텍처 및 디렉토리 구조에 대해서 많은 고민이 있었는데요. 결정 과정에 대해서 소개해 보려고 합니다. 해당 프로젝트의 Github 여기 입니다. 서론 이전에 진행했던 프로젝트들은 전통적인 Layered Architecture로 이루어졌습니다. 일반적으로 Controller, Service, Repository 세개의 레이어로 구성되어있습니다. Controller에서는 Service에 의존하고, Service에서는 Repository에 의존하는 방식입니다. 조금 더 구체적인 예시를 들면 다음과 같습니다. 해당 방식은 소규모의 프로젝트에서는 문제가 없었지만, 다양한 유틸리티 메소드와 비즈니스 로직이 많아지고, API 엔드포인트들이 많아질수록 서비스단의 코드가 비대해졌습니다. 서비스 코드가 몇백줄을 넘어가면서 유지보수성은 떨어지고 가독성 또한 낮아졌습니다. 원인 이 문제의 원인은 컨트롤러 - 서비스간의 1:1 관계 때문이라고 분석했습니다. 위 Member 예제처럼 MemberController - MemberService로 연관되어있는 경우입니다. 이 경우, MemberService는 MemberController의 모든 엔드포인트를 메소드로 구현해야 합니다. Member에 대한 모든 비즈니스 로직을 포함할 수 밖에 없고, 거대한 테스트 코드는 덤입니다. 저희는 해당 도메인을 단 하나의 서비스 객체로 나타내는 구조는 거대한 객체를 유발하고, 가독성과 유지보수성이 떨어지며, 객체지향적으로도 너무 많은 책임을 갖는 좋지 않은 구조라고 판단하였습니다. 대안 해당 문제를 어떻게 해결할 수 있을지 회의를 하였고, 몇가지 제안들이 있었습니다. CrudService ✋ 비대한 서비스 코드를 줄일 수 있도록 CRUD관련 엔드포인트들만 별도로 처리하는 서비스 객체를 사용하자! Hexagonal Architecture &amp; Clean Architecture ✋ 익숙한 계층 아키텍처 대신 새로운 아키텍처를 도입해서 사용하자! DDD의 아이디어 채용 - UseCase에 중점을 두자 ✋ 꼭 하나의 서비스가 여러개의 엔드포인트를 처리해야 할까? 하나의 엔드포인트에 대한 하나의 서비스(유즈케이스)로서 대응하는건 어떨까? 논의 CrudService 🙆 비대한 서비스 코드의 부담을 일부분 덜어줄 수 있다는 것은 동의. 🙅 하지만 결국 본질적인 문제를 해결하는것은 아니다. 🙅 CRUD이외의 엔드포인트가 다수 추가된다면 결국 비대해지는것은 마찬가지 Hexagonal &amp; Clean Architecture 기존 계층구조로 구성된 코드를 모두 뒤엎어야 함 🙅 참고할 수 있는 정석적인 자료가 부재하며, 참고자료마다 구현방식이 모두 다름 🙆 Ports &amp; Adapter를 통해 외부 입력과 출력에 대해서 독립성을 확보할 수 있다 🙅 in/out에 대한 port 및 adapter를 모두 작성해야 하는 불편함이 존재 🙅 사이드 프로젝트의 규모상 웹 요청방식은 HTTP이외가 추가되지 않을 것이며, 마찬가지로 영속성 툴 또한 메인 DB (MySQL)에서 추가되지 않을 것인데, 오버엔지니어링이 아닐까 UseCase 중심 🙆 익숙한 편이며, 서비스를 잘게 쪼갤 수 있다. 🙅 결국 모든 엔드포인트에 대해서 대응하는 유즈케이스 객체가 만들어질텐데, 너무 많아지지 않을까? 🙆 어차피 작업중인 유즈케이스만 보게 될 것 🙆 동시에 여러 유즈케이스를 보는 상황이 온다면 의존성 문제가 생긴게 아닐까 결론 논의 결과, 저희는 UseCase를 중심으로 한, 세분화된 서비스 객체의 계층구조로 결정하였습니다. 결론은 다음과 같습니다. 컨트롤러는 기존과 동일한 역할을 수행하고, 도메인별로 분리합니다. API 엔드포인트 상 /members/** -&gt; MemberController /ticketings/** -&gt; TicketingController 기존 서비스를 메소드별로 UseCase로 나누어 별도의 객체로 분리합니다. MemberService 하위의 memberService.login -&gt; LoginUseCase memberService.register -&gt; RegisterUseCase memberService.logout -&gt; LogoutUseCase 코드를 살펴보면 다음과 같습니다. //편의상 주입 생략 @RestController @RequestMapping("/members") public class MemberController { @PostMapping("/register") public ApiResponse&lt;MemberRegisterResponseDto&gt; registerMember( final @Valid @RequestBody MemberRegisterRequestDto registerMemberDto) { return ApiResponse.wrap( MemberRegisterResponseDto.toDto(memberRegisterUseCase.register(MemberRegisterCommandDto.builder() .email(registerMemberDto.getEmail()) .isSeller(registerMemberDto.getIsSeller()) .build() )) ); } @PostMapping(path = "/password-reset/mail") public ResponseEntity sendPasswordChangeEmail() { var email = securityContextHelper.getEmailInToken(); sendPasswordChangeEmailUseCase.sendEmail( SendPwdChangeEmailCommandDto.builder().email(email).build()); return ResponseEntity.ok().build(); } @PostMapping(path = "/{memberId}/points") public ResponseEntity&lt;ApiResponse&lt;ChargePointResponseDto&gt;&gt; chargePoint(@PathVariable String memberId, @Valid @RequestBody ChargePointRequestDto request) { var email = securityContextHelper.getEmailInToken(); var totalPoint = chargeMemberPointUseCase.chargePoint(request.convertToCommandDto(memberId, email)) .getTotalPoint(); var result = ChargePointResponseDto.builder().totalPoint(totalPoint).build(); return ResponseEntity.status(HttpStatus.OK).body(ApiResponse.wrap(result)); } } 재사용성과 의존성 해당 방식을 논의하던 중, 여러 유즈케이스에서 공통적으로 의존하는 로직이나 모듈에 대한 지적이 있었습니다. 공통적인 로직을 처리할 때는 ***Service라는 네이밍으로 적절한 추상화와 객체지향적 센스를 발휘하여 사용하기로 정하였습니다. 예시를 살펴보면 다음과 같습니다. 구매자의 “구매목록”을 담당하는 Purchase 도메인 내부의 생성 및 삭제 유즈 케이스입니다. @Service public class CreatePurchaseUseCase { @Transactional public CreatePurchaseResultDto createPurchase(CreatePurchaseCommandDto command) { //PurchaseService purchaseService.validateTicketingSalePeriod(ticketingId, command.getCommandCreatedAt()); var newPurchase = purchaseRepository.save(Purchase.builder().member(member).build()); var tickets = ticketRepository.findByTicketingIdAndPurchaseIsNullOrderById( ticketingId, Limit.of(count)); if (tickets.size() &lt; count) { throw new NotEnoughTicketException(); } tickets.forEach(ticket -&gt; { ticket.setPurchase(newPurchase); }); return CreatePurchaseResultDto.builder() .purchaseId(newPurchase.getId()) .createdAt(newPurchase.getCreatedAt()) .build(); } } @Service public class DeletePurchaseTicketsUseCase { @Transactional public void deletePurchaseTickets(DeletePurchaseTicketsCommandDto command) { var purchase = purchaseRepository.findById(command.getPurchaseId()).orElseThrow( PurchaseNotFoundException::new); var ticketsUnderPurchase = purchaseService.findTicketsUnderPurchase(purchase.getId()); var ticketsToRefund = ticketRepository.findAllById(command.getTicketIds()); var ticketing = ticketsUnderPurchase.getFirst().getTicketing(); //PurchaseService purchaseService.validatePurchaseOwnership(purchase.getId(), command.getMemberEmail()); purchaseService.validateTicketingSalePeriod(ticketing.getId(), command.getCommandCreatedAt()); var ticketIdUnderPurchase = ticketsUnderPurchase.stream().map(Ticket::getId).toList(); AtomicInteger numOfDeletedTicket = new AtomicInteger(); ticketsToRefund.forEach(ticket -&gt; { if (ticketIdUnderPurchase.contains(ticket.getId())) { ticket.setPurchase(null); numOfDeletedTicket.getAndIncrement(); } }); if (numOfDeletedTicket.get() == ticketsUnderPurchase.size()) { purchaseRepository.delete(purchase); } } } 두가지 유즈케이스 모두 “구매”에 대한 Validation을 하는 공통 로직에 의존하고 있기 때문에 해당 로직은 PurchaseService에 위임하였습니다. 다이어그램으로 살펴보면 다음과 같습니다. 이를 통해 공통 로직과 의존도를 분리할 수 있었습니다. 후기 개인적으로 더이상 거대한 Service 객체를 보지 않아도 되는 면에서 가독성만큼은 훨씬 낫다고 생각합니다. 하나의 유즈케이스에 대해서만 집중해도 되니 유틸리티 메소드에 대한 의존성 관리도 쾌적해졌다고 느꼈습니다. 이전에 사용하던 계층 구조와 선택하라고 한다면 분명 현재를 고를 것입니다. 다만 우려되거나 아쉬운 부분 또한 존재합니다. 특히 우려되는 점은 서비스에 대한 오염입니다. 적절한 책임의 분리를 하지 않고 모든 유틸리티 메소드들을 밀어넣는 용도로 XXXService를 사용한다면 결국 재사용성이 떨어지는 거대객체가 될 확률이 높습니다. 이 글을 작성하면서 보니, 위 언급된 이미지에서의 PurchaseService 또한 Validation과 Find의 유틸리티 책임이 혼합되어있습니다. PurchaseValidationService와 PurchaseFindService로 쪼개는게 더 적절할 수도 있습니다. 아쉬운 부분은 Hexagonal 과 Clean Architecture, Domain Driven Design등에 대해서 조금 더 깊은 이해를 했거나 경험이 있었다면 더 좋은 아키텍처가 있을 수도 있다는 것이었습니다. 해당 부분은 사이드 프로젝트를 마무리한다면 깊게 한번 다시 탐구해보도록 하겠습니다. 감사합니다.]]></summary></entry><entry><title type="html">영속성 까보기 (feat. 10분 테코톡)</title><link href="http://localhost:4000/jpa/persistance2/" rel="alternate" type="text/html" title="영속성 까보기 (feat. 10분 테코톡)" /><published>2024-02-27T12:00:00+09:00</published><updated>2024-02-27T12:00:00+09:00</updated><id>http://localhost:4000/jpa/persistance2</id><content type="html" xml:base="http://localhost:4000/jpa/persistance2/"><![CDATA[<h2 id="jpa와-영속성"><strong>JPA와 영속성</strong></h2>

<p>JPA 영속성 관련 실험 중 이상한 케이스를 발견했습니다.<br />
<a href="https://www.youtube.com/watch?v=kJexMyaeHDs&amp;t=92s">우아한형제들 테코톡</a>의 문제상황 1에서도 비슷한 예제가 있습니다.<br />
영상에서는 정확히 이유를 설명하지는 않고 영속성 설명으로 넘어가버려서
정확한 이유를 정리해보려고 합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Entity</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">AccessLevel</span><span class="o">.</span><span class="na">PROTECTED</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@DataJpaTest</span>
<span class="nd">@TestMethodOrder</span><span class="o">(</span><span class="nc">MethodOrderer</span><span class="o">.</span><span class="na">OrderAnnotation</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">PersonRepositoryTest</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">PersonRepository</span> <span class="n">personRepository</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Person</span> <span class="no">JOHN</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"John"</span><span class="o">);</span>


    <span class="nd">@Test</span> <span class="c1">// Test 1</span>
    <span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">saveAndCompare</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="n">personRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="no">JOHN</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">person</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="no">JOHN</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span> <span class="c1">// Test 2</span>
    <span class="nd">@Order</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">find</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="n">personRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="no">JOHN</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">person</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="no">JOHN</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h3 id="결과"><strong>결과</strong></h3>
<p>위에 작성되어있는 <code class="language-plaintext highlighter-rouge">Person</code> 클래스의 테스트 코드인<br />
Test1 과 Test2를 <strong>각자</strong> 돌렸을 때는 <strong>성공</strong>하지만,  <br />
<strong>동시</strong>에 돌리게 되면 <strong>실패</strong>합니다.</p>

<p>일반적으로 <code class="language-plaintext highlighter-rouge">@DataJpaTest</code>에는 <code class="language-plaintext highlighter-rouge">@Transactional</code>이 달려있기 때문에,<br />
하위 테스트들 모두에 <code class="language-plaintext highlighter-rouge">@Transactional</code>이 적용됩니다<br />
@Transactional이 걸린 테스트들은 테스트 마지막에 rollback이 된다는 사실도 알고 있죠.<br />
트랜잭션이 롤백되면 영속성 컨텍스트도 초기화되어 직관적으로는<br />
두개 다 성공하거나 두개 다 실패해야 할 꺼라고 생각되는데,<br />
<strong>왜 둘 중 하나만 성공하는걸까요?</strong></p>

<p><em>영속성 컨텍스트가 동기화가 되지 않은걸까요?</em><br />
하지만 <code class="language-plaintext highlighter-rouge">em.flush()</code> 와 <code class="language-plaintext highlighter-rouge">em.clear()</code>을 Test1 마지막에 추가하더라도 <br />
결과가 동일한것을 볼 수 있을 것입니다.</p>

<p>왜 실패하는지 그 이유에 대해 단계별로 쪼개서 알아보도록 합시다.</p>

<h2 id="test-1-에서는-어떤일이-일어나는가"><strong>Test 1 에서는 어떤일이 일어나는가</strong></h2>
<p><code class="language-plaintext highlighter-rouge">Person person = personRepository.save(JOHN);</code> <br />
단 한줄입니다</p>

<p>save 메소드의 내부 코드를 간단하게 살펴보면 다음과 같습니다 (분량상 몇줄 생략)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="o">&lt;</span><span class="no">S</span> <span class="kd">extends</span> <span class="no">T</span><span class="o">&gt;</span> <span class="no">S</span> <span class="nf">save</span><span class="o">(</span><span class="no">S</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">entityInformation</span><span class="o">.</span><span class="na">isNew</span><span class="o">(</span><span class="n">entity</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">entityManager</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">entity</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>아무것도 없는 상태에서 테스트 1을 수행했기 때문에, <br />
영속성 컨텍스트에 해당 엔티티가 존재하는지 확인하는 isNew 의 결과에 따라서 분기가 갈립니다.</p>

<p>간단하게 isNew메소드의 구현을 보면 아래와 같습니다</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isNew</span><span class="o">(</span><span class="no">T</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>
    <span class="no">ID</span> <span class="n">id</span> <span class="o">=</span> <span class="n">getId</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
    <span class="nc">Class</span><span class="o">&lt;</span><span class="no">ID</span><span class="o">&gt;</span> <span class="n">idType</span> <span class="o">=</span> <span class="n">getIdType</span><span class="o">();</span>
    
    <span class="k">if</span> <span class="o">(!</span><span class="n">idType</span><span class="o">.</span><span class="na">isPrimitive</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="k">instanceof</span> <span class="nc">Number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">((</span><span class="nc">Number</span><span class="o">)</span> <span class="n">id</span><span class="o">).</span><span class="na">longValue</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0L</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>id의 타입이 원시타입이 아니라면 null일 때 true 입니다.<br />
따라서 isNew는 true를 반환합니다 <br />
(<strong>Long은 wrapper 클래스이기때문에 원시타입이 아닙니다.</strong>)</p>

<p>이후 entityManager.persist 메소드 호출을 통해서 해당 엔티티는 영속성 컨텍스트에 등록됩니다.
인자로 넘긴 값을 그대로 반환하기 때문에 당연히 첫 <code class="language-plaintext highlighter-rouge">assert</code>는 성공합니다</p>

<h2 id="영속성-컨텍스트와-롤백"><strong>영속성 컨텍스트와 롤백</strong></h2>

<p>첫번째 테스트가 종료되었습니다.
첫번째 테스트가 롤백되면, 데이터베이스에 저장되어있는 <code class="language-plaintext highlighter-rouge">JOHN</code> 엔티티는 사라질 것입니다.
마찬가지로, 영속성 컨텍스트 또한 초기화되면서 내부의 엔티티들은 <code class="language-plaintext highlighter-rouge">detached</code> 상태로 전환됩니다</p>
<blockquote>
  <p>transaction rollback causes all pre-existing managed instances and removed instances [31] to become <strong>detached</strong><br />
[JSR-000317 Persistence Specification for Eval 2.0 Eval]</p>
</blockquote>

<p>간단하게 <code class="language-plaintext highlighter-rouge">em.contains(JOHN)</code> 과 <code class="language-plaintext highlighter-rouge">personRepository.find(JOHN)</code>을 통해서 확인할 수 있고,<br />
예상대로 둘다 <code class="language-plaintext highlighter-rouge">false</code>를 반환합니다.</p>

<p>하지만 id는 어떨까요? 
Test2의 첫번째 줄에 JOHN.getId()를 하면 null 이 아닌 1이 출력되는것을 확인할 수 있습니다.<br />
<strong>트랜잭션이 롤백되더라도 in-memory로 올라가있는 static 객체인 JOHN에 추가된 id는 회수되지 않는것입니다.</strong><br />
<strong>그리고 이게 두번째 테스트가 실패하는 원인입니다.</strong></p>

<p>다시 save로 돌아가봅시다.
마찬가지로 isNew 까지 들어가는데, 이번에는 id 가 null이 아니기 때문에 em.merge()를 호출합니다.<br />
em.merge는 반환할 때 새로운 영속상태의 엔티티를 생성해서 반환합니다.</p>

<p><em>(주의:전달된 인자가 영속상태로 관리되는것이 아니라, 영속상태로 관리되는 새로운 객체를 반환)</em>
<em>(em.contains(JOHN)을 해본다면 false가 출력됩니다)</em></p>

<p>즉, JOHN과는 전혀 다른, 영속상태로 관리되는 객체를 의미하는것입니다.<br />
따라서 assert문은 실패하게 됩니다.</p>

<p>테스트간 엔티티를 공유하는것이 문제가 될 수 있는 시나리오였습니다.<br />
이상입니다.</p>

<h3 id="부록---왜-id는-트랜잭션이-롤백되더라도-회수되지-않는가"><strong>부록 - 왜 id는 트랜잭션이 롤백되더라도 회수되지 않는가?</strong></h3>
<p>id는 왜 롤백되더라도 원래 상태로 복구되지 않습니다.<br />
즉 id에 대한 값 부여는 트랜잭션과 별도로 일어나는 작업입니다.<br />
왜 그럴까요?<br />
만약 진행중인 트랜잭션이 끝나지 않고 5분동안 락을 소유하게 된다면
해당 테이블에 값을 레코드를 추가하고 싶은 다른 트랜잭션들의 작업이 모두 막히기 때문입니다.</p>
<blockquote>
  <p>from <a href="https://stackoverflow.com/a/67401366">StackOverflow</a>, Vlad Mihalcea</p>
</blockquote>]]></content><author><name></name></author><category term="JPA" /><category term="JPA" /><summary type="html"><![CDATA[JPA와 영속성 JPA 영속성 관련 실험 중 이상한 케이스를 발견했습니다. 우아한형제들 테코톡의 문제상황 1에서도 비슷한 예제가 있습니다. 영상에서는 정확히 이유를 설명하지는 않고 영속성 설명으로 넘어가버려서 정확한 이유를 정리해보려고 합니다. @Getter @Entity @AllArgsConstructor @NoArgsConstructor(access = AccessLevel.PROTECTED) public class Person { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String name; public Person(String name) { this.name = name; } } @DataJpaTest @TestMethodOrder(MethodOrderer.OrderAnnotation.class) class PersonRepositoryTest { @Autowired private PersonRepository personRepository; private static final Person JOHN = new Person("John"); @Test // Test 1 @Order(1) void saveAndCompare() { Person person = personRepository.save(JOHN); assertThat(person).isEqualTo(JOHN); } @Test // Test 2 @Order(2) void find() { Person person = personRepository.save(JOHN); assertThat(person).isEqualTo(JOHN); } } 결과 위에 작성되어있는 Person 클래스의 테스트 코드인 Test1 과 Test2를 각자 돌렸을 때는 성공하지만, 동시에 돌리게 되면 실패합니다. 일반적으로 @DataJpaTest에는 @Transactional이 달려있기 때문에, 하위 테스트들 모두에 @Transactional이 적용됩니다 @Transactional이 걸린 테스트들은 테스트 마지막에 rollback이 된다는 사실도 알고 있죠. 트랜잭션이 롤백되면 영속성 컨텍스트도 초기화되어 직관적으로는 두개 다 성공하거나 두개 다 실패해야 할 꺼라고 생각되는데, 왜 둘 중 하나만 성공하는걸까요? 영속성 컨텍스트가 동기화가 되지 않은걸까요? 하지만 em.flush() 와 em.clear()을 Test1 마지막에 추가하더라도 결과가 동일한것을 볼 수 있을 것입니다. 왜 실패하는지 그 이유에 대해 단계별로 쪼개서 알아보도록 합시다. Test 1 에서는 어떤일이 일어나는가 Person person = personRepository.save(JOHN); 단 한줄입니다 save 메소드의 내부 코드를 간단하게 살펴보면 다음과 같습니다 (분량상 몇줄 생략) @Transactional public &lt;S extends T&gt; S save(S entity) { if (entityInformation.isNew(entity)) { entityManager.persist(entity); return entity; } else { return entityManager.merge(entity); } } 아무것도 없는 상태에서 테스트 1을 수행했기 때문에, 영속성 컨텍스트에 해당 엔티티가 존재하는지 확인하는 isNew 의 결과에 따라서 분기가 갈립니다. 간단하게 isNew메소드의 구현을 보면 아래와 같습니다 public boolean isNew(T entity) { ID id = getId(entity); Class&lt;ID&gt; idType = getIdType(); if (!idType.isPrimitive()) { return id == null; } if (id instanceof Number) { return ((Number) id).longValue() == 0L; } } id의 타입이 원시타입이 아니라면 null일 때 true 입니다. 따라서 isNew는 true를 반환합니다 (Long은 wrapper 클래스이기때문에 원시타입이 아닙니다.) 이후 entityManager.persist 메소드 호출을 통해서 해당 엔티티는 영속성 컨텍스트에 등록됩니다. 인자로 넘긴 값을 그대로 반환하기 때문에 당연히 첫 assert는 성공합니다 영속성 컨텍스트와 롤백 첫번째 테스트가 종료되었습니다. 첫번째 테스트가 롤백되면, 데이터베이스에 저장되어있는 JOHN 엔티티는 사라질 것입니다. 마찬가지로, 영속성 컨텍스트 또한 초기화되면서 내부의 엔티티들은 detached 상태로 전환됩니다 transaction rollback causes all pre-existing managed instances and removed instances [31] to become detached [JSR-000317 Persistence Specification for Eval 2.0 Eval] 간단하게 em.contains(JOHN) 과 personRepository.find(JOHN)을 통해서 확인할 수 있고, 예상대로 둘다 false를 반환합니다. 하지만 id는 어떨까요? Test2의 첫번째 줄에 JOHN.getId()를 하면 null 이 아닌 1이 출력되는것을 확인할 수 있습니다. 트랜잭션이 롤백되더라도 in-memory로 올라가있는 static 객체인 JOHN에 추가된 id는 회수되지 않는것입니다. 그리고 이게 두번째 테스트가 실패하는 원인입니다. 다시 save로 돌아가봅시다. 마찬가지로 isNew 까지 들어가는데, 이번에는 id 가 null이 아니기 때문에 em.merge()를 호출합니다. em.merge는 반환할 때 새로운 영속상태의 엔티티를 생성해서 반환합니다. (주의:전달된 인자가 영속상태로 관리되는것이 아니라, 영속상태로 관리되는 새로운 객체를 반환) (em.contains(JOHN)을 해본다면 false가 출력됩니다) 즉, JOHN과는 전혀 다른, 영속상태로 관리되는 객체를 의미하는것입니다. 따라서 assert문은 실패하게 됩니다. 테스트간 엔티티를 공유하는것이 문제가 될 수 있는 시나리오였습니다. 이상입니다. 부록 - 왜 id는 트랜잭션이 롤백되더라도 회수되지 않는가? id는 왜 롤백되더라도 원래 상태로 복구되지 않습니다. 즉 id에 대한 값 부여는 트랜잭션과 별도로 일어나는 작업입니다. 왜 그럴까요? 만약 진행중인 트랜잭션이 끝나지 않고 5분동안 락을 소유하게 된다면 해당 테이블에 값을 레코드를 추가하고 싶은 다른 트랜잭션들의 작업이 모두 막히기 때문입니다. from StackOverflow, Vlad Mihalcea]]></summary></entry><entry><title type="html">인터페이스 분리 원칙에 대해</title><link href="http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/isp1/" rel="alternate" type="text/html" title="인터페이스 분리 원칙에 대해" /><published>2024-02-27T12:00:00+09:00</published><updated>2024-02-27T12:00:00+09:00</updated><id>http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/isp1</id><content type="html" xml:base="http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/isp1/"><![CDATA[<h2 id="다-알고-있는-사실"><strong>다 알고 있는 사실</strong></h2>
<blockquote>
  <p>어떤 코드도 자신이 사용하지 않는 메소드에 의존하면 안된다<br />
자신이 사용하는 메서드에만 의존해야 한다</p>
</blockquote>

<p>매번 나오는 설명입니다.<br />
보통 이야기를 들어도 잘 이해가 안가기 때문에 보통 예제를 봅니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Person</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">work</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SomePerson</span> <span class="kd">implements</span> <span class="nc">Person</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">work</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">VeganPerson</span> <span class="kd">implements</span> <span class="nc">Person</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">work</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>하지만 eat 메소드가 필요 없는 Worker가 등장할 경우 
예외 처리를 하거나 의미없는 반환값 등으로 구현을 해야합니다.</p>

<p>따라서</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Workable</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">work</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">Feedable</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">Playable</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="nc">Workable</span><span class="o">,</span> <span class="nc">Feedable</span><span class="o">,</span> <span class="nc">Playable</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">work</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 짜라고 알려져 있습니다.</p>

<h2 id="근데-왜"><strong>근데 왜?</strong></h2>
<p><strong>ISP를 준수하면 얻는것이 무엇인가?</strong></p>

<ul>
  <li>변경에 대해서 유연한 것 ?</li>
  <li>불필요한 책임 제거 ?</li>
  <li>확장성 향상?</li>
</ul>

<p>이것들은 SRP나 다형성에 대한 것들이지, ISP와는 거리가 있다고 생각합니다.</p>

<h2 id="의존하는-모듈을-생각하라"><strong>의존하는 모듈을 생각하라</strong></h2>
<p>앞서 언급된 설명은 클래스에 구현에 초점이 맞춰져 있습니다.<br />
하지만 ISP의 의의는 의존관계에 있다고 생각합니다.<br />
클래스의 의존관계의 측면에서 ISP를 준수하지 않는 경우를 살펴보도록 합시다.</p>

<p><img src="/assets/img/posts/bad_isp.png" alt="alt text" /></p>

<p>하나의 클래스에 모듈 A,B,C에 필요한 메소드들이 모두 선언되어있습니다<br />
<strong>여기서 문제는 모듈 A가 자신이 사용하지 않는 메소드 (2,3,5,6)을 호출하는것을 막지 못한다는것입니다.</strong><br />
모듈 B와 C도 마찬가지입니다.</p>

<p>다시 이전 코드 예시로 돌아가겠습니다.<br />
ISP 를 준수하지 않은 Worker 인터페이스를 의존하는 모듈을 가정해봅시다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">WorkPlace</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">workers</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addWorker</span><span class="o">(</span><span class="nc">Person</span> <span class="n">worker</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">workers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">worker</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">allWork</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="nc">Person</span> <span class="n">worker</span> <span class="o">:</span> <span class="n">workers</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">worker</span><span class="o">.</span><span class="na">work</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="c1">//troll</span>
		<span class="n">worker</span><span class="o">.</span><span class="na">play</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>WorkPlace 클래스 내부에서 Worker을 직접적으로 의존하게되면 다른 메소드를 호출하는것이 가능해져버립니다.</p>

<p>이 문제를 해결하는 방법은 두가지가 존재합니다.</p>

<h3 id="소유-모델"><strong>소유 모델</strong></h3>
<p><img src="/assets/img/posts/good_isp1.png" alt="alt text" /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">Workable</span> <span class="n">work</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Playable</span> <span class="n">play</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Eatable</span> <span class="n">eat</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>이후 각 모듈들은 Person이 소유하는 내부 객체만을 바라보면서 소통할 수 있습니다.</p>

<h3 id="인터페이스-모델"><strong>인터페이스 모델</strong></h3>
<p><img src="/assets/img/posts/good_isp2.png" alt="alt text" /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Person</span> <span class="kd">extends</span> <span class="nc">Workable</span><span class="o">,</span> <span class="nc">Playable</span><span class="o">,</span> <span class="nc">Eatable</span> <span class="o">{</span>
	
<span class="o">}</span>
</code></pre></div></div>
<p>마찬가지로 외부 모듈들은 Workable, Playable, Eatable을 골라서 협력하는것이 가능합니다.</p>

<h3 id="결과"><strong>결과</strong></h3>
<p>위 두 방법을 사용하여 인터페이스에 의존한다면 컴파일 타임에 막을 수 있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">WorkPlace</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">IWork</span><span class="o">&gt;</span> <span class="n">workers</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addWorker</span><span class="o">(</span><span class="nc">Workable</span> <span class="n">worker</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">workers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">worker</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">allWork</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="nc">Workable</span> <span class="n">worker</span> <span class="o">:</span> <span class="n">workers</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">worker</span><span class="o">.</span><span class="na">work</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="c1">//doesn't compile</span>
		<span class="n">worker</span><span class="o">.</span><span class="na">play</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>즉 ISP를 만족시킨다면 인터페이스에 대한 접근권한을 컴파일 시간에 타입으로 막을 수 있는 것입니다.</strong></p>

<p>감사합니다.</p>

<h2 id="credits">Credits</h2>
<p>모든 내용은 유튜브 <a href="https://www.youtube.com/@CodeSpitz">코드스피츠 채널</a> 을 참고하였습니다</p>]]></content><author><name></name></author><category term="객체지향" /><category term="객체지향" /><summary type="html"><![CDATA[다 알고 있는 사실 어떤 코드도 자신이 사용하지 않는 메소드에 의존하면 안된다 자신이 사용하는 메서드에만 의존해야 한다 매번 나오는 설명입니다. 보통 이야기를 들어도 잘 이해가 안가기 때문에 보통 예제를 봅니다. interface Person { public void work(); public void eat(); public void play(); } class SomePerson implements Person{ public void work() { ... } public void eat() { ... } public void play() { ... } } class VeganPerson implements Person{ public void work() { ... } public void eat() { ... } public void play() { ... } } 하지만 eat 메소드가 필요 없는 Worker가 등장할 경우 예외 처리를 하거나 의미없는 반환값 등으로 구현을 해야합니다. 따라서 interface Workable { public void work(); } interface Feedable{ public void eat(); } interface Playable{ public void eat(); } class Person implements Workable, Feedable, Playable{ public void work() { ... } public void eat() { ... } public void play() { ... } } 이렇게 짜라고 알려져 있습니다. 근데 왜? ISP를 준수하면 얻는것이 무엇인가? 변경에 대해서 유연한 것 ? 불필요한 책임 제거 ? 확장성 향상? 이것들은 SRP나 다형성에 대한 것들이지, ISP와는 거리가 있다고 생각합니다. 의존하는 모듈을 생각하라 앞서 언급된 설명은 클래스에 구현에 초점이 맞춰져 있습니다. 하지만 ISP의 의의는 의존관계에 있다고 생각합니다. 클래스의 의존관계의 측면에서 ISP를 준수하지 않는 경우를 살펴보도록 합시다. 하나의 클래스에 모듈 A,B,C에 필요한 메소드들이 모두 선언되어있습니다 여기서 문제는 모듈 A가 자신이 사용하지 않는 메소드 (2,3,5,6)을 호출하는것을 막지 못한다는것입니다. 모듈 B와 C도 마찬가지입니다. 다시 이전 코드 예시로 돌아가겠습니다. ISP 를 준수하지 않은 Worker 인터페이스를 의존하는 모듈을 가정해봅시다. class WorkPlace { private List&lt;Person&gt; workers; public void addWorker(Person worker) { workers.add(worker); } public void allWork() { for(Person worker : workers) { worker.work(); } //troll worker.play(); } } WorkPlace 클래스 내부에서 Worker을 직접적으로 의존하게되면 다른 메소드를 호출하는것이 가능해져버립니다. 이 문제를 해결하는 방법은 두가지가 존재합니다. 소유 모델 class Person { private Workable work; private Playable play; private Eatable eat; } 이후 각 모듈들은 Person이 소유하는 내부 객체만을 바라보면서 소통할 수 있습니다. 인터페이스 모델 interface Person extends Workable, Playable, Eatable { } 마찬가지로 외부 모듈들은 Workable, Playable, Eatable을 골라서 협력하는것이 가능합니다. 결과 위 두 방법을 사용하여 인터페이스에 의존한다면 컴파일 타임에 막을 수 있습니다. class WorkPlace { private List&lt;IWork&gt; workers; public void addWorker(Workable worker) { workers.add(worker); } public void allWork() { for(Workable worker : workers) { worker.work(); } //doesn't compile worker.play(); } } 즉 ISP를 만족시킨다면 인터페이스에 대한 접근권한을 컴파일 시간에 타입으로 막을 수 있는 것입니다. 감사합니다. Credits 모든 내용은 유튜브 코드스피츠 채널 을 참고하였습니다]]></summary></entry><entry><title type="html">CS 면접대비 - 컨테이너</title><link href="http://localhost:4000/interview/ms_container/" rel="alternate" type="text/html" title="CS 면접대비 - 컨테이너" /><published>2024-02-24T12:00:00+09:00</published><updated>2024-02-24T12:00:00+09:00</updated><id>http://localhost:4000/interview/ms_container</id><content type="html" xml:base="http://localhost:4000/interview/ms_container/"><![CDATA[<details><summary>도커가 왜 필요할까요?</summary><div>
    <ul>
      <li>옛날 이야기를 잠깐 하면
        <ul>
          <li>옛날에는 서버를 관리하는게 쉽지 않았습니다</li>
          <li>새롭게 설치해야하는 프로그램은 많고</li>
          <li>운영체제는 업데이트되고</li>
          <li>그와중 프로그램끼리 호환이 안되는 경우도 많고</li>
          <li>지금 당장 리눅스에 MySQL을 까는건 쉽지 않습니다</li>
          <li>이런 문제들을 해결해보기 위해서 VM이라는게 먼저 나왔습니다.</li>
        </ul>
      </li>
    </ul>
  </div></details>

<details><summary>그렇다면 VM은 뭔가요?</summary><div>

    <ul>
      <li>
        <p>동일한 하드웨어에서 여러개의 운영체제 인스턴스를 돌려보자 라는 의도의 결과입니다.</p>

        <ul>
          <li>마치 냉장고 안에 냉장고를 넣듯이, 서로 완벽하게 격리되어있고 OS 정보들을 모두 보유하고 있습니다.</li>
          <li>각 VM은 호스트로부터 Hypervisor를 통해서 가상 하드웨어와 어댑터를 할당받아서
실제 여러개의 하드웨어가 없더라도 공유할 수 있도록 합니다.</li>
          <li>윈도우에서 C드라이브의 Windows 폴더 전체</li>
        </ul>

        <details><summary>그렇다면 VM으로 말씀하신 내용을 다 커버할 수 있는거 아닌가요?</summary><div>

            <ul>
              <li>물론 가능은 합니다만, VM에는 비효율성이 몇가지 있습니다.
                <ul>
                  <li>운영체제 파일 자체를 요구하기 때문에 고정된 하드디스크 요구량과 메모리</li>
                  <li>시작하는데 OS별 부팅과정을 거치기 때문에 오래 걸리고</li>
                  <li>별도의 커널/라이브러리/바이너리가 다 필요하기때문에 리소스를 많이 먹습니다</li>
                </ul>
              </li>
              <li>
                <p>사람들은 이 발상을 하게 됩니다 : 굳이 별도의 커널과 OS로 다른 어플리케이션을 실행해야 할까?</p>

                <ul>
                  <li>따라서 도커가 등장합니다</li>
                  <li>도커는 일종의 VM으로 리눅스 커널을 이용하여 하위 컨테이너들을 분리합니다.</li>
                </ul>

                <details><summary>도커는 일종의 VM? 맞나요?</summary><div>
                    <ul>
                      <li>
                        <p>VirtualBox나 VMWare같은 VM이라기보다는, 도커 엔진이 가상화된 리눅스 환경을 구현해줍니다.
    - 윈도우같은경우에는 내장되어있는 hyper-v를 사용합니다.
    - 맥의 경우에도 리눅스 커널을 에뮬레이팅 해주는 애플리케이션을 사용합니다. HyperKit</p>

                        <p>컨테이너는 매번 OS파일들을 보유할 필요가 없습니다.</p>

                        <ul>
                          <li>마치 냉장고에 야채칸, 계란칸, 김치칸 칸막이를 만드는 것처럼 입니다.</li>
                        </ul>
                      </li>
                    </ul>

                  </div></details>

                <details><summary>도커는 어떻게 그러면 프로세스를 격리하나요?</summary><div>
                    <ul>
                      <li>제가 알고있는바로는 리눅스의 Cgroup과 namespace 기능을 활용하는것으로 알고있습니다.</li>
                    </ul>
                  </div></details>
              </li>
            </ul>

          </div></details>
      </li>
    </ul>
  </div></details>

<details><summary>도커는 그럼 어떻게 그런 운영체제의 버전이나, 다양한 운영체제의 종류를 적은 용량을 통해 저장하나요?</summary><div>

    <ul>
      <li>Aufs라는 특별한 파일 시스템을 사용하고, 해당 도커파일을 빌드해서 사용합니다.</li>
    </ul>

  </div></details>]]></content><author><name></name></author><category term="Interview" /><category term="면접" /><summary type="html"><![CDATA[도커가 왜 필요할까요? 옛날 이야기를 잠깐 하면 옛날에는 서버를 관리하는게 쉽지 않았습니다 새롭게 설치해야하는 프로그램은 많고 운영체제는 업데이트되고 그와중 프로그램끼리 호환이 안되는 경우도 많고 지금 당장 리눅스에 MySQL을 까는건 쉽지 않습니다 이런 문제들을 해결해보기 위해서 VM이라는게 먼저 나왔습니다. 그렇다면 VM은 뭔가요? 동일한 하드웨어에서 여러개의 운영체제 인스턴스를 돌려보자 라는 의도의 결과입니다. 마치 냉장고 안에 냉장고를 넣듯이, 서로 완벽하게 격리되어있고 OS 정보들을 모두 보유하고 있습니다. 각 VM은 호스트로부터 Hypervisor를 통해서 가상 하드웨어와 어댑터를 할당받아서 실제 여러개의 하드웨어가 없더라도 공유할 수 있도록 합니다. 윈도우에서 C드라이브의 Windows 폴더 전체 그렇다면 VM으로 말씀하신 내용을 다 커버할 수 있는거 아닌가요? 물론 가능은 합니다만, VM에는 비효율성이 몇가지 있습니다. 운영체제 파일 자체를 요구하기 때문에 고정된 하드디스크 요구량과 메모리 시작하는데 OS별 부팅과정을 거치기 때문에 오래 걸리고 별도의 커널/라이브러리/바이너리가 다 필요하기때문에 리소스를 많이 먹습니다 사람들은 이 발상을 하게 됩니다 : 굳이 별도의 커널과 OS로 다른 어플리케이션을 실행해야 할까? 따라서 도커가 등장합니다 도커는 일종의 VM으로 리눅스 커널을 이용하여 하위 컨테이너들을 분리합니다. 도커는 일종의 VM? 맞나요? VirtualBox나 VMWare같은 VM이라기보다는, 도커 엔진이 가상화된 리눅스 환경을 구현해줍니다. - 윈도우같은경우에는 내장되어있는 hyper-v를 사용합니다. - 맥의 경우에도 리눅스 커널을 에뮬레이팅 해주는 애플리케이션을 사용합니다. HyperKit 컨테이너는 매번 OS파일들을 보유할 필요가 없습니다. 마치 냉장고에 야채칸, 계란칸, 김치칸 칸막이를 만드는 것처럼 입니다. 도커는 어떻게 그러면 프로세스를 격리하나요? 제가 알고있는바로는 리눅스의 Cgroup과 namespace 기능을 활용하는것으로 알고있습니다. 도커는 그럼 어떻게 그런 운영체제의 버전이나, 다양한 운영체제의 종류를 적은 용량을 통해 저장하나요? Aufs라는 특별한 파일 시스템을 사용하고, 해당 도커파일을 빌드해서 사용합니다.]]></summary></entry><entry><title type="html">CS 면접대비 - 프로그래밍 언어(자바)</title><link href="http://localhost:4000/interview/ms_java1/" rel="alternate" type="text/html" title="CS 면접대비 - 프로그래밍 언어(자바)" /><published>2024-02-24T12:00:00+09:00</published><updated>2024-02-24T12:00:00+09:00</updated><id>http://localhost:4000/interview/ms_java1</id><content type="html" xml:base="http://localhost:4000/interview/ms_java1/"><![CDATA[<h3 id="call-by-value-와-call-by-reference의-차이가-무엇인가요">❓Call by Value 와 Call by reference의 차이가 무엇인가요?</h3>

<blockquote>
  <p>참고 : 현대의 CS개론에서 call by value 와 call by reference 에 대한 구분은<br />
 더이상 활발하게 이루어지지 않는다.<br />
 Pass by reference로 정의되던 방식이 사용되는 경우가 드물기 때문.</p>
</blockquote>

<h3 id="value-와-variable의-차이는-무엇인가"><strong>Value</strong> 와 <strong>Variable</strong>의 차이는 무엇인가?</h3>

<p>이 질문에 정확히 대답을 할 수 있어야 한다.</p>

<ul>
  <li><strong>Value</strong>(값)란, 표현식의 결과값을 의미한다</li>
  <li><strong>Variable</strong>(변수)이란, <strong>value를</strong> 담는 그릇이다</li>
  <li>즉 int arg = 1; 라는 표현식에서 value는 1, variable은 arg라고 볼 수 있다.</li>
</ul>

<h3 id="parameter-와-argument의-차이는-무엇인가"><strong>Parameter</strong> 와 <strong>Argument</strong>의 차이는 무엇인가?</h3>

<ul>
  <li>Parameter란 함수 호출을 위해 caller가 공급하는 <strong>variable</strong></li>
  <li>Argument란 함수 호출에 사용되는 parameter에 제공되는 <strong>value</strong></li>
</ul>

<h3 id="call-by-value">Call by Value</h3>

<p>Call by Value에서, 함수의 <strong>parameter</strong>들은 함수의 호출을 위해 함수의 <strong>argument</strong>로 초기화되어 <strong>새롭게 생성된 variable</strong>들이다.</p>

<p><strong>“값”</strong>으로 초기화된 <strong>“변수”</strong> 들의 관계와 동일하다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">another_variable</span> <span class="o">=</span> <span class="n">arg</span><span class="p">;</span>

<span class="c1">//another_variable = 2; 가 arg에 영향을 주는가? 그렇지 않다.</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">int</span> <span class="n">param</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">param</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 해당 함수의 호출 결과는 일반적인 변수들의 관계와 동일하다</span>
<span class="c1">// "새롭게 생성된 변수" 라는걸 기억하자 !</span>
<span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">param</span> <span class="o">=</span> <span class="n">arg</span><span class="p">;</span>
<span class="n">param</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
<span class="c1">// 이때 arg 와 param은 서로 다르다!</span>
</code></pre></div></div>

<h3 id="call-by-reference">Call by Reference</h3>

<p>Call by reference에서는 함수의 <strong>parameter</strong>들은 단순히 “alias”로 취급된다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="c1">// foo 함수 진입</span>
<span class="c1">// param 은 arg 랑 같네?</span>
<span class="n">arg</span> <span class="cm">/* param */</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<p>여기까지 이해했다면 자바로 다시 돌아가보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">(</span><span class="nc">Dog</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="s">"Fifi"</span><span class="o">);</span>
<span class="o">}</span>
<span class="nc">Dog</span> <span class="n">aDog</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="s">"Max"</span><span class="o">);</span>

<span class="n">foo</span><span class="o">(</span><span class="n">aDog</span><span class="o">);</span>
<span class="c1">// 함수 호출 이후 aDog가 가리키는 값은 여전히 "Max"이다</span>
<span class="c1">// d 가 aDog의 alias로 작동하는가? 그렇지 않다.</span>

</code></pre></div></div>

<p>혹자는 이렇게 반론할지도 모른다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">(</span><span class="nc">Dog</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">d</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Fifi"</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">// 개의 이름이 변경되었다.</span>
</code></pre></div></div>

<p>하지만 이것 또한 call by reference를 의미하는것은 아니다.<br />
어디까지나 Dog 객체에 대한 “포인터”를 전달한것일 뿐, 실제 Dog 객체를 전달한 것이 아니기 때문이다.
즉 “포인터” 와 “reference”는 서로 <strong>다른</strong> 개념이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">(</span><span class="nc">Dog</span> <span class="n">someDog</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// AAA</span>
    <span class="n">someDog</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Max"</span><span class="o">);</span>     <span class="c1">// BBB</span>
    <span class="n">someDog</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="s">"Fifi"</span><span class="o">);</span>  <span class="c1">// CCC</span>
    <span class="n">someDog</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Rowlf"</span><span class="o">);</span>   <span class="c1">// DDD</span>
<span class="o">}</span>

<span class="nc">Dog</span> <span class="n">myDog</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="s">"Rover"</span><span class="o">);</span>
<span class="n">foo</span><span class="o">(</span><span class="n">myDog</span><span class="o">);</span>
</code></pre></div></div>

<p>Dog객체가 메모리 주소 0x42에 있다고 가정해보자.</p>

<ul>
  <li>AAA
    <ul>
      <li>someDog라는 인자값이 0x42로 설정 (새로운 변수!)</li>
    </ul>
  </li>
  <li>BBB
    <ul>
      <li>someDog는 포인터를 따라가면 Dog객체가 있는 0x42에 도달하고, 이름 변경을 요청</li>
    </ul>
  </li>
  <li>CCC
    <ul>
      <li>someDog의 값은 0x74로 변경</li>
    </ul>
  </li>
  <li>DDD
    <ul>
      <li>0x74에 있는 Dog객체의 이름 변경을 요청</li>
    </ul>
  </li>
</ul>

<p>함수 호출이 된 이후의 결과를 생각해보자
myDog라는 변수가 변경되었는가? 그렇지 않다. 42를 유지하고 있다.</p>

<h3 id="thinking-point">Thinking Point</h3>

<blockquote>
  <p>Java로 전형적인 swap함수를 작성할 수 있는가?</p>
</blockquote>

<p>설명이 많이 복잡했는데, “자바는 primitive의 경우 call by value, 이외는 call by reference 로 동작합니다”<br />
라는 답변이 왜 잘못되었는 지 알 수 있길 바란다.</p>

<p>출처</p>

<ul>
  <li>https://stackoverflow.com/a/34971934</li>
  <li>https://www.javadude.com/articles/passbyvalue.htm</li>
</ul>

<p>&lt;/div&gt;&lt;/details&gt;</p>

<h2 id="string-stringbuilder-stringbuffer">String, StringBuilder, StringBuffer</h2>

<h3 id="string">String</h3>

<p><code class="language-plaintext highlighter-rouge">String s = new String("Hello");</code></p>

<p>안좋은 선언이라고 알려져 있는데, 왜 쓰지 말라는 걸까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">두</span> <span class="n">객체의</span> <span class="n">차이는</span> <span class="n">뭘까</span><span class="o">?</span>
<span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"Hello"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">);</span>
</code></pre></div></div>

<details><summary>펼치기</summary><div>

    <p>이유는 String의 특성에 있다.<br />
자바의 String 객체는 <strong>불변객체</strong>이다.<br />
덕분에 JVM은 굳이 동일한 내용을 가진 문자열들을 따로 힙에 저장하지 않고 <strong>String Pool</strong>이라는 곳에 하나만 저장하고 해당 문자열의 주소값만 전달하는 방식으로 메모리를 최적화할 수 있다.<br />
이 과정을 “Interning” 이라고 한다.</p>

    <p>반면 new String 의 문자열 생성자를 사용한 경우는 힙에 해당 문자열을 생성하게 되고, 서로 다른 주소값을 보유하게 된다.
이로 인해 메모리 낭비가 이루어지기 때문에 피하는 것이 좋다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//자바의 String은 intern() 메소드를 제공한다</span>
<span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"Hello"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">).</span><span class="na">intern</span><span class="o">();</span>
<span class="c1">// 하지만 두 표현식이 동일하지는 않다.</span>
<span class="c1">// intern() 메소드를 사용하더라도 힙에 올라간 메모리는 GC가 회수할때까지 남아있게 된다.</span>
</code></pre></div>    </div>

    <p><br /></p>

    <blockquote>
      <h4 id="string-pool--">String Pool 의 위치</h4>
    </blockquote>

    <p>Java7 이전까지는 String Pool이 고정된 크기를 가진 PermGen 영역에 존재하였다.<br />
지나치게 많은 문자열들이 intern 될 경우, JVM이 OutOfMemoryError를 만들어내는 경우가 있어,<br />
Java7 이후부터는 Heap 영역에 저장되도록 변경되었다.</p>

    <blockquote>
      <p>https://muratakkan.medium.com/understanding-and-using-the-java-string-pool-in-java-d60d3176716</p>
    </blockquote>

    <h3 id="stringbuffer--stringbuffer">StringBuffer &amp; StringBuffer</h3>

    <p>String의 불변성은 앞서 말한 바와 같이 장점이 존재하지만, 단점 또한 존재한다.<br />
바로 문자열 연산에 약하다는것인데, 문자열 두개를 더하는 연산같은 경우 불필요하게 두개의 문자열이 모두 Heap에 올라가야하는 비효율이 존재한다.</p>

    <p>Java는 이 문제를 StringBuilder 와 StringBuffer라는 클래스를 두어 해결한다.<br />
가변성을 보유한 StringBuilder 클래스는 append, reverse 등 다양한 mutate method를 제공한다.<br />
또한, String 간의 연산 또한 연산자 오버로딩을 통해서 내부적으로는 StringBuilder를 사용한다.</p>

  </div></details>

<details><summary>StringBuffer와 StringBuilder의 차이는 무엇일까?</summary><div>

    <p>StringBuffer의 경우, 동기화를 지원하며 이에 대한 tradeoff로 연산속도가 느리다.
StringBuilder의 경우, 동기화를 지원하지 않지만, 연산속도가 빠르다.</p>

  </div></details>

<p><br /></p>

<p>왜 이런 결과가 나올까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str1</span><span class="o">=</span><span class="s">"str"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">str2</span><span class="o">=</span><span class="s">"ing"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">concat</span><span class="o">=</span><span class="n">str1</span><span class="o">+</span><span class="n">str2</span><span class="o">;</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">concat</span><span class="o">==</span><span class="s">"string"</span><span class="o">);</span> <span class="c1">//false</span>

<span class="n">vs</span>

<span class="kd">final</span> <span class="nc">String</span> <span class="n">str1</span><span class="o">=</span><span class="s">"str"</span><span class="o">;</span>
<span class="kd">final</span> <span class="nc">String</span> <span class="n">str2</span><span class="o">=</span><span class="s">"ing"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">concat</span><span class="o">=</span><span class="n">str1</span><span class="o">+</span><span class="n">str2</span><span class="o">;</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">concat</span><span class="o">==</span><span class="s">"string"</span><span class="o">);</span> <span class="c1">//true</span>
</code></pre></div></div>

<details><summary> 펼치기
</summary><div>

  </div></details>

<p><br />
<br /></p>

<p>최적화 할 수 있을까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">s</span> <span class="o">+=</span> <span class="s">", "</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<details><summary> 펼치기
</summary><div>

  </div></details>

<h2 id="접근제어자">❓접근제어자</h2>

<ul>
  <li>public : 어디서든 접근 가능</li>
  <li>protected : 동일 패키지 + 상속받은 클래스 내부</li>
  <li>default : 동일 패키지 내부</li>
  <li>private : 동일 클래스 내부</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">tut02</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CA</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">ia</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="kt">int</span> <span class="n">ib</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">ic</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
<span class="o">}</span>
<span class="c1">//tut2 패키지 내의 클래스 CA 외부에서 접근 가능한 변수들은 ?</span>
<span class="c1">//tut2 패키지 내의 클래스 CA 내부에서 접근 가능한 변수들은 ?</span>
<span class="c1">//tut2 패키지 내의 클래스 CA를 상속받은 CAA 내부에서 접근 가능한 변수들은 ?</span>


<span class="kn">package</span> <span class="nn">tut03</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">tut02.CA</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tut03</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">CA</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="no">CA</span><span class="o">();</span> <span class="o">-&gt;</span> <span class="n">여기서</span> <span class="n">접근</span> <span class="n">가능한</span> <span class="n">변수들은</span><span class="o">?</span>
        <span class="no">CC</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="no">CC</span><span class="o">();</span> <span class="o">-&gt;</span> <span class="n">여기서</span> <span class="n">접근</span> <span class="n">가능한</span> <span class="n">변수들은</span><span class="o">?</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<details>
<summary>해답</summary>
<div>

    <ol>
      <li>ia, ib, ic</li>
      <li>ia, ib, ic, id</li>
      <li>ia, ib, ic</li>
    </ol>

    <p><strong>같은 패키지 내에서는 public protected default가 같은 효과를 갖는다!</strong></p>

  </div>
</details>

<h2 id="lambda--stream">❓Lambda &amp; Stream</h2>

<p>자바스크립트를 접해봤다면 함수형 패러다임을 구현하는데 유용한 map, reduce, filter등의 유용한 메소드들에 익숙할 것이다.<br />
자바도 버전 8부터 Lambda 익명함수들을 지원하기 시작했다.</p>

<p>Priority Queue의 구현이나 Custom sort 등에서 이미 많이 사용하는걸 보았을 것이다</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Instead of this</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">listDevs</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">Developer</span><span class="o">&gt;()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Developer</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">Developer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">getAge</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="c1">//We can do this</span>
<span class="n">listDevs</span><span class="o">.</span><span class="na">sort</span><span class="o">((</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">)-&gt;</span><span class="n">o1</span><span class="o">.</span><span class="na">getAge</span><span class="o">()-</span><span class="n">o2</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
</code></pre></div></div>

<p>자바스크립트에서 이런 코드를 본적이 있을것이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">calculate</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">operatorFunction</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">operatorFunction</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">calculate</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">add</span><span class="p">);</span>
</code></pre></div></div>

<p>자바스크립트는 함수가 일급객체이기때문에 아무 조작 없이 해당 코드가 실행 가능하다.<br />
하지만 엄격한 자바의 세계에서는 그렇지 않다.<br />
람다식을 사용하기 위해서는 어떤게 필요할까?</p>

<h3 id="함수형-인터페이스"><strong>함수형 인터페이스</strong></h3>

<p>단 하나의 추상 메소드만 정의되어있는 인터페이스를 함수형 인터페이스라고 부른다</p>

<p>람다식으로 사용하기 위해서는 대상이 함수형 인터페이스여야만 한다<br />
이유는 당연하게도(?) 메소드가 하나만 있어야 람다식이 수행하는 대상을 알 수 있기 때문이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">OperatorFunction</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">operate</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="nc">OperatorFunction</span> <span class="n">operatorFunction</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">operatorFunction</span><span class="o">.</span><span class="na">operate</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">calculate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">);</span>
</code></pre></div></div>

<p>매번 유사한 함수형 인터페이스를 선언하는건 번거롭기때문에 자바에서는 util 패키지에서 사전에 정의된 인터페이스들을 제공한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//example : IntBinaryOperator를 사용하면 굳이 정의안해도 됨</span>

<span class="c1">//package java.util.function</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IntBinaryOperator</span> <span class="o">{</span>

    <span class="cm">/**
     * Applies this operator to the given operands.
     *
     * @param left the first operand
     * @param right the second operand
     * @return the operator result
     */</span>
    <span class="kt">int</span> <span class="nf">applyAsInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="nc">IntBinaryOperator</span> <span class="n">operator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">operator</span><span class="o">.</span><span class="na">applyAsInt</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>돌이켜보면 Sort에서 람다를 사용할 때는 별도의 인터페이스를 선언하지 않았다. 왜일까?<br />
이유는 Sort 메소드의 두번째 인자인 Comparable<T>가 compare라는 하나의 메소드를 가진
함수형 인터페이스이기 때문이다.</T></p>

<h2 id="wrappper-class">❓Wrappper Class</h2>

<p>자바에서는 일반적으로 알려진 Primitive Type들 (int, boolean, char … )
에 대해서 Wrapper 클래스들을 제공한다.</p>

<blockquote>
  <h4 id="똑같은-자료형인거같은데-왜-필요할까">똑같은 자료형인거같은데, 왜 필요할까?</h4>
</blockquote>

<ul>
  <li>ArrayList 등의 Collection 프레임워크들은 객체들의 메모리 위치를 저장하기 때문이다
    <ul>
      <li>실제로 ArrayList 구현의 생성자를 보면 다음 코드가 들어있다
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">ArrayList</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">)</span> <span class="o">{</span>
<span class="kd">super</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">initialCapacity</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Illegal Capacity: "</span><span class="o">+</span>
                                        <span class="n">initialCapacity</span><span class="o">);</span>
<span class="k">this</span><span class="o">.</span><span class="na">elementData</span> <span class="o">=</span> <span class="o">(</span><span class="no">E</span><span class="o">[])</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="n">initialCapacity</span><span class="o">];</span>
<span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>멀티쓰레딩의 동기화 지원</li>
  <li>null 값의 존재</li>
  <li>값 컨텍스트가 초래하는 영향
    <ul>
      <li>한번 값을 사용하면 어딘가에서는 계속 필요</li>
    </ul>
  </li>
</ul>

<h2 id="overriding--overloading">❓Overriding &amp; Overloading</h2>

<ul>
  <li>
    <p>superclass 에 이미 존재하는 메소드를 subclass에서 동일한 이름으로 사용하고 싶지만, 구현체는 바꾸고 싶을 경우 Overriding을 사용</p>
  </li>
  <li>
    <p>Overloading은 superclass에 존재하지 않는 새로운 메서드를 subclass에서 선언하는것을 의미</p>
  </li>
</ul>

<p>생각해볼거리</p>

<ul>
  <li>왜 자바는 static method에 대한 오버라이딩을 허용하지 않을까?</li>
  <li>왜 자바는 operator overloading이 없을까?</li>
</ul>]]></content><author><name></name></author><category term="Interview" /><summary type="html"><![CDATA[❓Call by Value 와 Call by reference의 차이가 무엇인가요?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/java.png" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/java.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">CS 면접대비 - 데이터베이스</title><link href="http://localhost:4000/interview/ms_database1/" rel="alternate" type="text/html" title="CS 면접대비 - 데이터베이스" /><published>2024-01-24T12:00:00+09:00</published><updated>2024-01-24T12:00:00+09:00</updated><id>http://localhost:4000/interview/ms_database1</id><content type="html" xml:base="http://localhost:4000/interview/ms_database1/"><![CDATA[<details><summary>데이터베이스 키에 대해서 설명해주세요</summary><div>
    <ol>
      <li>Candidate Key
        <ol>
          <li>Unique 식별</li>
          <li>최소 속성</li>
        </ol>
      </li>
      <li>Foreign Key
        <ol>
          <li>다른 테이블의 Primary Key</li>
        </ol>
      </li>
      <li>Primary Key
        <ol>
          <li>Candidate Key중 선택된 Main Key</li>
        </ol>
      </li>
      <li>Alternate Key
        <ol>
          <li>Candidate Key - Primary Key</li>
        </ol>
      </li>
      <li>Super Key
        <ol>
          <li>Unique 식별하지만 최소 속성은 만족 못하는 키</li>
        </ol>
      </li>
    </ol>
  </div></details>

<details><summary>데이터베이스를 왜 사용할까요?</summary><div>
    <ul>
      <li>데이터베이스 이전에는 파일시스템을 사용하여 데이터를 식별하였습니다.<br />
디스크 IO는 느리고, 실제 어플리케이션은 랜덤 IO를 많이 발생시킵니다.<br />
이것을 해결하기 위해서 랜덤 IO를 순차 IO로 바꿔서 실행하는걸 통해 더 성능적 이득이 있습니다.</li>
    </ul>
  </div></details>

<details><summary>트랜잭션</summary><div>
    <ul>
      <li><strong><em>트랜잭션은 무엇인가요? 왜 필요한가요?</em></strong>
        <ul>
          <li>데이터베이스에서 논리적인 작업의 단위입니다.</li>
        </ul>
      </li>
      <li>
        <p>트랜잭션 특징</p>

        <ul>
          <li>원자성(Atomicity) : all or nothing</li>
          <li>일관성(Consistancy) : 항상 동일한 결과</li>
          <li>독립성(Isolation) : 다른 트랜잭션이 끼어들 수 없다</li>
          <li>지속성(Durability) : 트랜잭션의 결과는 영구적으로 반영</li>
        </ul>
      </li>
      <li>트랜잭션 격리수준
        <ul>
          <li><strong>_트랜잭션 격리수준이 왜 필요한가요? _</strong>
            <ul>
              <li>트랜잭션은 ACID 원칙을 지켜야 하지만, 완벽하게 지키는 형태는 동시적인 요청에 대한 처리량이 떨어지게 됩니다.
따라서 데이터베이스는 애플리케이션 개발자가 본인들의 환경에 맞게 트레이드오프를 고려하여 선택할 수 있도록 격리레벨을 만들어두었습니다.
                <ul>
                  <li><strong><em>어떤 트레이드오프인가요?</em></strong>
                    <ul>
                      <li>동시적 처리량을 늘릴수록 이상현상이 더 많이 발생합니다.
                        <ul>
                          <li>대표적인 이상현상을 말씀드리면 아래가 있습니다.
                            <ul>
                              <li>DIRTY READ : 트랜잭션 실행도중 다른 트랜잭션의 업데이트에 의해 수정된 데이터를 읽는것</li>
                              <li>PHANTOM READ : 동일한 쿼리에 대해서 두번째 쿼리에서 없던 결과가 나오는것</li>
                              <li>NON REPEATABLE READ : 트랜잭션 실행도중 두번째 읽었을 때 다른 값이 나오는것</li>
                            </ul>
                          </li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                  <li><strong><em>격리수준이 이 문제를 어떻게 해결해주나요?</em></strong>
                    <ul>
                      <li>Serializable : 모든 트랜잭션이 순차적으로 실행되도록 합니다 어떠한 문제도 일어나지 않습니다.</li>
                      <li>Repeatable Read: MySQL의 기본 설정입니다.<br />
변경 전 레코드를 언두 공간에 백업해두고 앞서 처리된 트랜잭션에 대해서는 언두 공간의 값을 읽게 합니다.
트랜잭션이 앞서 처리되었는지는 트랜잭션마다 번호를 부여하여 판단합니다.
일반적인 Phantom Read 또한 이후 트랜잭션 번호를 가진 언두로그를 봐서 무시하면 되지만
SELECT FOR UPDATE와 같이 같이 관여할 경우, 락은 언두로그가 아닌 테이블값을 읽기 때문에
Phantom Read가 발생할 수 있습니다.</li>
                      <li>Read Commited : Commit된 데이터만 읽을 수 있도록 하는 설정입니다.
Commit 된 데이터를 읽을 경우 Non Repeatable Read가 발생할 수 있습니다.</li>
                      <li>Read Uncommited : Commit 되지 않은 데이터도 읽을 수 있도록 하는것. 모든 이상현상 발생.</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

  </div></details>

<details><summary>정규화</summary><div>
    <ul>
      <li><strong><em>정규화란 무엇인가요? 왜 필요한가요?</em></strong>
        <ul>
          <li>정규화란 데이터베이스 테이블들의 관계에서 중복을 최소화시키는 방법입니다.</li>
        </ul>
      </li>
      <li><strong><em>역정규화?</em></strong>
        <ul>
          <li>테이블에 대한 조인이 성능적으로 문제가 되는 경우(경로가 멀어서)</li>
          <li>조회에 대한 처리성능이 중요하다고 판단된다면</li>
        </ul>
      </li>
    </ul>

  </div></details>

<details><summary>인덱스</summary><div>
    <ul>
      <li><strong><em>인덱스가 무엇인가요? 왜 필요한가요?</em></strong>
        <ul>
          <li>데이터베이스는 랜덤 IO 엑세스와의 싸움입니다.
  추가적인 쓰기작업과 저장공간을 사용하여 데이터베이스 테이블의 검색 속도를 향상시키기 위한 자료구조를 의미합니다.</li>
          <li><strong><em>어떤 자료구조인가요?</em></strong>
            <ul>
              <li>일반적으로는 B+ 트리를 이용합니다.
                <ul>
                  <li><strong><em>왜 B+ 트리를 이용할까요?</em></strong>
                    <ul>
                      <li>B+ 트리는 Leaf Node간 연결이 되어있기때문에
                        <ul>
                          <li>FullScan과 Range Scan에 유리합니다.</li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong><em>인덱스의 성능 또는 고려해야할 사항?</em></strong>
        <ul>
          <li>WHERE 절에 자주 사용되는 열</li>
          <li>SELECT 절에 자주 등장하는 칼럼</li>
          <li>JOIN에 자주 사용되는 열</li>
          <li>데이터 중복도가 높은 열은 효과가 없음
            <ul>
              <li>남성/여성</li>
            </ul>
          </li>
          <li>WHERE 절을 변형하면 인덱스를 안타는 이유
            <ul>
              <li>결국 시작점을 알 수 없기 때문임 LIKE 또는 SUBSTR</li>
            </ul>
          </li>
          <li>복합 인덱스를 구성할 때 칼럼의 순서를 고려하는 기준
            <ul>
              <li>분포도는 의미가 없다
                <ul>
                  <li>연산자가 “=” 가 아닐 수 있기 때문</li>
                </ul>
              </li>
              <li>연산자를 최우선적으로 고려하라
                <ul>
                  <li>분포도가 좋더라도 연산자가 선분조건이면 앞에 두는게 안좋을 수 있다는것</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

  </div></details>]]></content><author><name></name></author><category term="Interview" /><summary type="html"><![CDATA[데이터베이스 키에 대해서 설명해주세요 Candidate Key Unique 식별 최소 속성 Foreign Key 다른 테이블의 Primary Key Primary Key Candidate Key중 선택된 Main Key Alternate Key Candidate Key - Primary Key Super Key Unique 식별하지만 최소 속성은 만족 못하는 키 데이터베이스를 왜 사용할까요? 데이터베이스 이전에는 파일시스템을 사용하여 데이터를 식별하였습니다. 디스크 IO는 느리고, 실제 어플리케이션은 랜덤 IO를 많이 발생시킵니다. 이것을 해결하기 위해서 랜덤 IO를 순차 IO로 바꿔서 실행하는걸 통해 더 성능적 이득이 있습니다. 트랜잭션 트랜잭션은 무엇인가요? 왜 필요한가요? 데이터베이스에서 논리적인 작업의 단위입니다. 트랜잭션 특징 원자성(Atomicity) : all or nothing 일관성(Consistancy) : 항상 동일한 결과 독립성(Isolation) : 다른 트랜잭션이 끼어들 수 없다 지속성(Durability) : 트랜잭션의 결과는 영구적으로 반영 트랜잭션 격리수준 _트랜잭션 격리수준이 왜 필요한가요? _ 트랜잭션은 ACID 원칙을 지켜야 하지만, 완벽하게 지키는 형태는 동시적인 요청에 대한 처리량이 떨어지게 됩니다. 따라서 데이터베이스는 애플리케이션 개발자가 본인들의 환경에 맞게 트레이드오프를 고려하여 선택할 수 있도록 격리레벨을 만들어두었습니다. 어떤 트레이드오프인가요? 동시적 처리량을 늘릴수록 이상현상이 더 많이 발생합니다. 대표적인 이상현상을 말씀드리면 아래가 있습니다. DIRTY READ : 트랜잭션 실행도중 다른 트랜잭션의 업데이트에 의해 수정된 데이터를 읽는것 PHANTOM READ : 동일한 쿼리에 대해서 두번째 쿼리에서 없던 결과가 나오는것 NON REPEATABLE READ : 트랜잭션 실행도중 두번째 읽었을 때 다른 값이 나오는것 격리수준이 이 문제를 어떻게 해결해주나요? Serializable : 모든 트랜잭션이 순차적으로 실행되도록 합니다 어떠한 문제도 일어나지 않습니다. Repeatable Read: MySQL의 기본 설정입니다. 변경 전 레코드를 언두 공간에 백업해두고 앞서 처리된 트랜잭션에 대해서는 언두 공간의 값을 읽게 합니다. 트랜잭션이 앞서 처리되었는지는 트랜잭션마다 번호를 부여하여 판단합니다. 일반적인 Phantom Read 또한 이후 트랜잭션 번호를 가진 언두로그를 봐서 무시하면 되지만 SELECT FOR UPDATE와 같이 같이 관여할 경우, 락은 언두로그가 아닌 테이블값을 읽기 때문에 Phantom Read가 발생할 수 있습니다. Read Commited : Commit된 데이터만 읽을 수 있도록 하는 설정입니다. Commit 된 데이터를 읽을 경우 Non Repeatable Read가 발생할 수 있습니다. Read Uncommited : Commit 되지 않은 데이터도 읽을 수 있도록 하는것. 모든 이상현상 발생. 정규화 정규화란 무엇인가요? 왜 필요한가요? 정규화란 데이터베이스 테이블들의 관계에서 중복을 최소화시키는 방법입니다. 역정규화? 테이블에 대한 조인이 성능적으로 문제가 되는 경우(경로가 멀어서) 조회에 대한 처리성능이 중요하다고 판단된다면 인덱스 인덱스가 무엇인가요? 왜 필요한가요? 데이터베이스는 랜덤 IO 엑세스와의 싸움입니다. 추가적인 쓰기작업과 저장공간을 사용하여 데이터베이스 테이블의 검색 속도를 향상시키기 위한 자료구조를 의미합니다. 어떤 자료구조인가요? 일반적으로는 B+ 트리를 이용합니다. 왜 B+ 트리를 이용할까요? B+ 트리는 Leaf Node간 연결이 되어있기때문에 FullScan과 Range Scan에 유리합니다. 인덱스의 성능 또는 고려해야할 사항? WHERE 절에 자주 사용되는 열 SELECT 절에 자주 등장하는 칼럼 JOIN에 자주 사용되는 열 데이터 중복도가 높은 열은 효과가 없음 남성/여성 WHERE 절을 변형하면 인덱스를 안타는 이유 결국 시작점을 알 수 없기 때문임 LIKE 또는 SUBSTR 복합 인덱스를 구성할 때 칼럼의 순서를 고려하는 기준 분포도는 의미가 없다 연산자가 “=” 가 아닐 수 있기 때문 연산자를 최우선적으로 고려하라 분포도가 좋더라도 연산자가 선분조건이면 앞에 두는게 안좋을 수 있다는것]]></summary></entry><entry><title type="html">CS 면접대비 - 네트워크</title><link href="http://localhost:4000/interview/ms_network2/" rel="alternate" type="text/html" title="CS 면접대비 - 네트워크" /><published>2024-01-24T12:00:00+09:00</published><updated>2024-01-24T12:00:00+09:00</updated><id>http://localhost:4000/interview/ms_network2</id><content type="html" xml:base="http://localhost:4000/interview/ms_network2/"><![CDATA[<details><summary>OSI 7계층</summary><div>
    <ul>
      <li><strong><em>“OSI 7계층을 설명해주세요”</em></strong>
        <ul>
          <li>Physical Layer - 케이블, 허브 : 전기신호 전송</li>
          <li>Data Link Layer - 브릿지, 스위치 : MAC주소 부여!
            <ul>
              <li>MAC 주소란?
                <ul>
                  <li>하드웨어 장치의 네트워크 식별자 - 주민등록번호이며 변경되지 않음</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>Network Layer - 라우터, IP : 라우터를 통해 IP 주소를 지정
            <ul>
              <li>IP 주소란?
                <ul>
                  <li>컴퓨터 네트워크에 할당된 논리적 숫자 주소
                    <ul>
                      <li>IP 주소만으로 통신이 가능한가요?
                        <ul>
                          <li>그렇지 않습니다. 로컬 네트워크 내부에서 어떤 하드웨어와 통신하는지 알기 위해서는 MAC주소를 알아야 합니다.</li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li>라우터의 역할은?
                <ul>
                  <li>네트워크 자체를 연결시켜주고 최적화된 경로로 통신이 가능하게끔 하는 네트워크 장치</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>Transport Layer - TCP와 UDP 프로토콜을 통해 세그먼트를 전달</li>
          <li>Session Layer - API, Socket : TCP/IP 세션의 생성 및 소멸</li>
          <li>Presentation Layer - JPEG, MPEG: 데이터 표현 및 암호화</li>
          <li>Application - HTTP, FTP, DNS : 응용 프로세스와 직접 관계하여 서비스 수행</li>
        </ul>
      </li>
      <li><strong><em>“왜 OSI 7계층으로 나누는 걸까요?”</em></strong>
        <ul>
          <li>관심사의 분리 때문입니다. 문제가 발생했을 때 서로 독립적이여야 해결이 간단합니다.</li>
        </ul>
      </li>
    </ul>

  </div></details>

<details><summary>Multiplexing과 Demultiplexing이 무엇인가요?</summary><div>
    <ul>
      <li>L4 레이어에서 담당하는 역할로, Multiplexing이란 여러개의 어플리케이션의 소켓으로부터 나오는 요청들에 대해서 
일종의 이름표인 Transport Header를 붙혀주는것입니다.</li>
      <li>Demultiplexing은 반대로 Transport Header를 보고 적절한 소켓으로 전달해주는것을 의미합니다.</li>
    </ul>
  </div></details>

<details><summary>Stateless한것과 Connectionless 한것의 차이는 무엇인가요?</summary><div>
    <ul>
      <li>Stateless하다는것은 이전 요청에 영향을 받지 않고 매번 독립적이게 취급한다는 의미입니다.</li>
      <li>Connectionless 하다는것은 TCP처럼 커넥션이 유지되는것이 아닌, 패킷이 독립적으로 취급되는 UDP와 같은 프로토콜을 의미합니다.</li>
    </ul>
  </div></details>

<details><summary>TCP가 Connection 기반 프로토콜이라면, 웹서버는 요청마다 새로운 소켓을 생성할까요?</summary><div>
    <ul>
      <li>링크 대체</li>
    </ul>
  </div></details>

<details><summary>TCP 프로토콜에 대해서 설명해주세요</summary><div>
    <ul>
      <li>TCP 프로토콜은 Transport Layer의 신뢰적인 연결방식 입니다.
        <ul>
          <li>전송속도가 너무 빠를경우 수신측이 받아들이지 못해 손실이 나는것을 대비한 흐름제어</li>
          <li>라우터의 데이터 병목 등으로 인해 처리할 수 없어 손실이 나는것을 대비한 혼잡제어</li>
        </ul>
      </li>
    </ul>
  </div></details>

<details><summary>UDP 프로토콜에 대해서 설명해주세요</summary><div>
    <ul>
      <li>UDP 프로토콜이란 비연결성, 신뢰성 없는 전송 프로토콜입니다.<br />
각각의 데이터 패킷은 독립적으로 취급되며, 성공 또는 실패 여부와 관계없이 전송을 시도합니다.</li>
    </ul>
  </div></details>

<details><summary>TCP의 커넥션 수립 과정을 설명해주세요</summary><div>
    <ul>
      <li>TCP의 경우, 3-way handshake를 통해서 커넥션을 수립합니다. 과정은 아래와 같습니다.
        <ol>
          <li>클라이언트 -&gt; 서버 : 커넥션 신청을 하기 위해서 SYN 패킷을 전송합니다 (seq=x)</li>
          <li>서버 -&gt; 클라이언트 : 커넥션 신청을 받았다는것을 확인시켜주기 위해 ACK(x+1) 과 SYN(y) 를 전송합니다</li>
          <li>클라이언트 -&gt; 서버 : 커넥션을 수립하기 위해서 ACK(y+1) 패킷을 전송합니다.</li>
        </ol>
      </li>
      <li>4-way handshake는 커넥션을 종료하기 위해서 사용됩니다.
        <ol>
          <li>클라이언트 -&gt; 서버 : FIN 플래그를 전송합니다.</li>
          <li>서버 -&gt; 클라이언트 : FIN에 대한 ACK를 전송합니다.</li>
          <li>서버 -&gt; 클라이언트 : 데이터를 모두 받았으므로 FIN을 전송합니다</li>
          <li>클라이언트 -&gt; 서버 : FIN 에 대한 ACK를 전송합니다.</li>
        </ol>
      </li>
    </ul>
  </div></details>

<details><summary>Checksum은 무엇인가요?</summary><div>
    <ul>
      <li>전달된 네트워크 Segment에 문제가 있는지 검증하기 위해서 모든 Segment Header의 값을 더한것을 넣어둡니다.
        <ul>
          <li><strong><em>무엇을 더하는건가요?</em></strong>
            <ul>
              <li>CRC의 경우 내용을 이진수로 취급하여 모두 더하고 상수로 나눈 뒤 사용합니다.</li>
              <li>Summation의 경우 각 바이트를 정수형으로 취급하여 모두 더해주고 나머지 연산의 결과값을 사용합니다.</li>
            </ul>
          </li>
          <li><strong><em>TCP와 UDP중 어떤 프로토콜이 checksum을 사용하나요?</em></strong>
            <ul>
              <li>둘 다 사용합니다.</li>
            </ul>
          </li>
          <li><strong><em>체크섬으로 오류를 복원할 수 있나요?</em></strong>
            <ul>
              <li>불가능합니다. 오류의 완벽한 검출 또한 어렵습니다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </div></details>

<details><summary>주소창에 naver.com 을 입력하면 일어나는 일을 설명해주세요</summary><div>
    <p>네트워크 통신을 시도하는 것입니다. naver.com 에대한 IP 주소를 찾는것이 첫번째 목적입니다.</p>
    <ol>
      <li>윈도우의 경우, hosts 파일을 먼저 참조합니다. 만약 명시적으로 도메인에 대한 매핑이 있다면 즉시 사용합니다.</li>
      <li>없다면 이전에 접속한 이력이 있는지 RAM의 DNS 캐시를 참조합니다.</li>
      <li>없다면 공유기를 통해서 ISP를 거쳐 DNS lookup을 시도합니다.</li>
      <li>받아온 IP 주소를 보고 로컬 네트워크를 살펴봅니다. 대역대가 다르기 때문에 다른 네트워크로 보내기 위해 공유기를 찾아야 합니다.</li>
      <li>공유기를 찾기 위해서 ARP를 합니다. 즉 브로드캐스팅을 하여 공유기의 MAC주소를 받아옵니다.</li>
      <li>공유기에게 IP 주소로 메시지를 전달하라는 명령을 내립니다.</li>
      <li>공유기는 최적의 경로를 찾아서 다음 라우터로 ARP 과정을 반복하며 메시지를 전송합니다.</li>
      <li>받아온 IP 주소를 통해서 HTTP 프로토콜을 사용하기 위해서 TCP/IP 연결을 수립합니다.
        <ul>
          <li>3-way handshake</li>
          <li>데이터 전송</li>
          <li>4-way handshake</li>
        </ul>
      </li>
      <li>다운로드한 CSS/HTML/JS 파일들을 다운로드하고 브라우저에서 렌더링합니다.</li>
      <li>HTML/CSS/JS 파일들을 디스크에 Caching 되며 다시 접속할 경우 캐시를 참조합니다.</li>
    </ol>
  </div></details>

<details><summary>공개키와 대칭키의 차이는 무엇인가요?</summary><div>
    <ul>
      <li>공개키는 암호화하기위해서 사용한 키와 복호화하기위해서 사용하는 키가 동일한 것을 의미합니다.</li>
      <li>대칭키는 암호화하기위해 사용한 키와 복호화하기 위해 사용하는 키가 다른것을 의미합니다.</li>
    </ul>
  </div></details>

<details><summary>HTTPS는 어떤 키를 사용하나요?</summary><div>
    <ul>
      <li>대칭키와 비대칭키를 둘다 사용합니다.</li>
    </ul>
  </div></details>

<details><summary>TLS/SSL Handshake 과정을 설명해주세요</summary><div>
    <ol>
      <li>TCP 연결을 수립합니다.</li>
      <li>C-&gt;S : Client Hello</li>
      <li>C&lt;-S : Server Hello + CA 인증서</li>
      <li>C : CA 인증서의 유효성 검증</li>
      <li>C-&gt;S : 자신이 생성한 랜덤 대칭키를 인증서에 있는 서버의 공개키로 암호화하여 서버에 전송</li>
      <li>S : 서버는 자신의 개인키를 이용하여 대칭키를 확보하고, 메시지를 해석</li>
    </ol>

    <ul>
      <li>만약 중간에 CA인증서를 공격자가 위조하여 가로채고 요청을 한다면 어떡하나요?
        <ul>
          <li>결국 서버의 개인키를 알지 못한다면 가로채도 의미가 없습니다.
클라이언트가 사용할 데이터 암호화 키는 서버의 공개키를 이용하기 때문에 서버의 개인키가 없다면 해석 할 수 없습니다.</li>
        </ul>
      </li>
    </ul>

  </div></details>

<details><summary>로드 밸런서란 무엇인가요?</summary><div>
    <ul>
      <li>부하 분산 장치 또는 기술을 의미합니다.
        <ul>
          <li>접속 요청을 사전에 할당한 VIP로 받아 요청을 분배해줍니다.
            <ul>
              <li><strong><em>중간에 서버 하나가 죽는다면 어떡하나요?</em></strong>
                <ul>
                  <li>이를 확인하기 위해서 지속적으로 헬스체크를 수행합니다
                    <ul>
                      <li>ICMP : 직접 PING 을 날리거나 (3계층)</li>
                      <li>TCP : 연결을 시도하거나 (4계층)</li>
                      <li>HTTP : 요청을 시도하거나 (7계층)</li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li><strong><em>어떻게 균등하게 분배하나요?</em></strong>
                <ul>
                  <li>Weighted Round Robin : 가중치가 높은 서버에 요청을 배분합니다. 처리성능이 각각 다를 경우</li>
                  <li>Least Connection: 연결이 제일 적은 서버에 요청을 전달합니다.</li>
                  <li>Hash : 특정 사용자가 동일 서버에 연결이 필요할경우 사용합니다.</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </div></details>

<details><summary>DSR이 무엇인가요?</summary><div>
    <ul>
      <li>동영상 스트리밍과 같이 나가는 트래픽이 들어가는 트래픽보다 클 경우 모두 로드 밸런서를 거쳐야 하기 때문에<br />
로드 밸런서가 병목지점이 될 수 있기 때문에 로드 밸런서를 거치지 않고 서버에서 직접 응답하는것을 의미합니다.</li>
    </ul>
  </div></details>

<details><summary>GET과 POST 방식의 차이점?</summary><div>
    <ul>
      <li>GET의 경우 요청하는 데이터가 URL에 그대로 붙어서 노출되기 때문에 보안에 취약합니다.
추가적으로 URL의 길이는 한정되어있습니다. 
동일한 요청의 경우 캐싱됩니다.</li>
      <li>POST의 경우 request body 부분에 데이터가 담겨있으며 암호화를 한다면 GET보다 보안이 좋습니다.</li>
    </ul>
  </div></details>

<details><summary>CORS 문제를겪은적 있나요?</summary><div>
    <ul>
      <li>네. 동일한 하드웨어에서 프론트엔드와 백엔드를 둘다 실행시켰을 때 
프론트엔드에서 백엔드로 요청을 하는경우 흔히 발생했습니다.
        <ul>
          <li><strong><em>왜 문제가 일어나는건가요?</em></strong>
            <ul>
              <li>서로 다른 도메인간 정보를 공유하는것을 브라우저에서 보안적으로 막기 때문입니다.</li>
              <li>프록시 또는 애플리케이션 코드에 CORS 설정을 열어두는 방식으로 해결 가능합니다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </div></details>

<details><summary>NGINX또는 APACHE는 어떤 계층인가요</summary><div>
    <ul>
      <li>HTTP웹서버들은 애플리케이션 레이어이며 HTTP는 TCP/IP 프로토콜을 이용하기 때문에 4계층입니다.</li>
    </ul>
  </div></details>]]></content><author><name></name></author><category term="Interview" /><summary type="html"><![CDATA[OSI 7계층 “OSI 7계층을 설명해주세요” Physical Layer - 케이블, 허브 : 전기신호 전송 Data Link Layer - 브릿지, 스위치 : MAC주소 부여! MAC 주소란? 하드웨어 장치의 네트워크 식별자 - 주민등록번호이며 변경되지 않음 Network Layer - 라우터, IP : 라우터를 통해 IP 주소를 지정 IP 주소란? 컴퓨터 네트워크에 할당된 논리적 숫자 주소 IP 주소만으로 통신이 가능한가요? 그렇지 않습니다. 로컬 네트워크 내부에서 어떤 하드웨어와 통신하는지 알기 위해서는 MAC주소를 알아야 합니다. 라우터의 역할은? 네트워크 자체를 연결시켜주고 최적화된 경로로 통신이 가능하게끔 하는 네트워크 장치 Transport Layer - TCP와 UDP 프로토콜을 통해 세그먼트를 전달 Session Layer - API, Socket : TCP/IP 세션의 생성 및 소멸 Presentation Layer - JPEG, MPEG: 데이터 표현 및 암호화 Application - HTTP, FTP, DNS : 응용 프로세스와 직접 관계하여 서비스 수행 “왜 OSI 7계층으로 나누는 걸까요?” 관심사의 분리 때문입니다. 문제가 발생했을 때 서로 독립적이여야 해결이 간단합니다. Multiplexing과 Demultiplexing이 무엇인가요? L4 레이어에서 담당하는 역할로, Multiplexing이란 여러개의 어플리케이션의 소켓으로부터 나오는 요청들에 대해서 일종의 이름표인 Transport Header를 붙혀주는것입니다. Demultiplexing은 반대로 Transport Header를 보고 적절한 소켓으로 전달해주는것을 의미합니다. Stateless한것과 Connectionless 한것의 차이는 무엇인가요? Stateless하다는것은 이전 요청에 영향을 받지 않고 매번 독립적이게 취급한다는 의미입니다. Connectionless 하다는것은 TCP처럼 커넥션이 유지되는것이 아닌, 패킷이 독립적으로 취급되는 UDP와 같은 프로토콜을 의미합니다. TCP가 Connection 기반 프로토콜이라면, 웹서버는 요청마다 새로운 소켓을 생성할까요? 링크 대체 TCP 프로토콜에 대해서 설명해주세요 TCP 프로토콜은 Transport Layer의 신뢰적인 연결방식 입니다. 전송속도가 너무 빠를경우 수신측이 받아들이지 못해 손실이 나는것을 대비한 흐름제어 라우터의 데이터 병목 등으로 인해 처리할 수 없어 손실이 나는것을 대비한 혼잡제어 UDP 프로토콜에 대해서 설명해주세요 UDP 프로토콜이란 비연결성, 신뢰성 없는 전송 프로토콜입니다. 각각의 데이터 패킷은 독립적으로 취급되며, 성공 또는 실패 여부와 관계없이 전송을 시도합니다. TCP의 커넥션 수립 과정을 설명해주세요 TCP의 경우, 3-way handshake를 통해서 커넥션을 수립합니다. 과정은 아래와 같습니다. 클라이언트 -&gt; 서버 : 커넥션 신청을 하기 위해서 SYN 패킷을 전송합니다 (seq=x) 서버 -&gt; 클라이언트 : 커넥션 신청을 받았다는것을 확인시켜주기 위해 ACK(x+1) 과 SYN(y) 를 전송합니다 클라이언트 -&gt; 서버 : 커넥션을 수립하기 위해서 ACK(y+1) 패킷을 전송합니다. 4-way handshake는 커넥션을 종료하기 위해서 사용됩니다. 클라이언트 -&gt; 서버 : FIN 플래그를 전송합니다. 서버 -&gt; 클라이언트 : FIN에 대한 ACK를 전송합니다. 서버 -&gt; 클라이언트 : 데이터를 모두 받았으므로 FIN을 전송합니다 클라이언트 -&gt; 서버 : FIN 에 대한 ACK를 전송합니다. Checksum은 무엇인가요? 전달된 네트워크 Segment에 문제가 있는지 검증하기 위해서 모든 Segment Header의 값을 더한것을 넣어둡니다. 무엇을 더하는건가요? CRC의 경우 내용을 이진수로 취급하여 모두 더하고 상수로 나눈 뒤 사용합니다. Summation의 경우 각 바이트를 정수형으로 취급하여 모두 더해주고 나머지 연산의 결과값을 사용합니다. TCP와 UDP중 어떤 프로토콜이 checksum을 사용하나요? 둘 다 사용합니다. 체크섬으로 오류를 복원할 수 있나요? 불가능합니다. 오류의 완벽한 검출 또한 어렵습니다. 주소창에 naver.com 을 입력하면 일어나는 일을 설명해주세요 네트워크 통신을 시도하는 것입니다. naver.com 에대한 IP 주소를 찾는것이 첫번째 목적입니다. 윈도우의 경우, hosts 파일을 먼저 참조합니다. 만약 명시적으로 도메인에 대한 매핑이 있다면 즉시 사용합니다. 없다면 이전에 접속한 이력이 있는지 RAM의 DNS 캐시를 참조합니다. 없다면 공유기를 통해서 ISP를 거쳐 DNS lookup을 시도합니다. 받아온 IP 주소를 보고 로컬 네트워크를 살펴봅니다. 대역대가 다르기 때문에 다른 네트워크로 보내기 위해 공유기를 찾아야 합니다. 공유기를 찾기 위해서 ARP를 합니다. 즉 브로드캐스팅을 하여 공유기의 MAC주소를 받아옵니다. 공유기에게 IP 주소로 메시지를 전달하라는 명령을 내립니다. 공유기는 최적의 경로를 찾아서 다음 라우터로 ARP 과정을 반복하며 메시지를 전송합니다. 받아온 IP 주소를 통해서 HTTP 프로토콜을 사용하기 위해서 TCP/IP 연결을 수립합니다. 3-way handshake 데이터 전송 4-way handshake 다운로드한 CSS/HTML/JS 파일들을 다운로드하고 브라우저에서 렌더링합니다. HTML/CSS/JS 파일들을 디스크에 Caching 되며 다시 접속할 경우 캐시를 참조합니다. 공개키와 대칭키의 차이는 무엇인가요? 공개키는 암호화하기위해서 사용한 키와 복호화하기위해서 사용하는 키가 동일한 것을 의미합니다. 대칭키는 암호화하기위해 사용한 키와 복호화하기 위해 사용하는 키가 다른것을 의미합니다. HTTPS는 어떤 키를 사용하나요? 대칭키와 비대칭키를 둘다 사용합니다. TLS/SSL Handshake 과정을 설명해주세요 TCP 연결을 수립합니다. C-&gt;S : Client Hello C&lt;-S : Server Hello + CA 인증서 C : CA 인증서의 유효성 검증 C-&gt;S : 자신이 생성한 랜덤 대칭키를 인증서에 있는 서버의 공개키로 암호화하여 서버에 전송 S : 서버는 자신의 개인키를 이용하여 대칭키를 확보하고, 메시지를 해석 만약 중간에 CA인증서를 공격자가 위조하여 가로채고 요청을 한다면 어떡하나요? 결국 서버의 개인키를 알지 못한다면 가로채도 의미가 없습니다. 클라이언트가 사용할 데이터 암호화 키는 서버의 공개키를 이용하기 때문에 서버의 개인키가 없다면 해석 할 수 없습니다. 로드 밸런서란 무엇인가요? 부하 분산 장치 또는 기술을 의미합니다. 접속 요청을 사전에 할당한 VIP로 받아 요청을 분배해줍니다. 중간에 서버 하나가 죽는다면 어떡하나요? 이를 확인하기 위해서 지속적으로 헬스체크를 수행합니다 ICMP : 직접 PING 을 날리거나 (3계층) TCP : 연결을 시도하거나 (4계층) HTTP : 요청을 시도하거나 (7계층) 어떻게 균등하게 분배하나요? Weighted Round Robin : 가중치가 높은 서버에 요청을 배분합니다. 처리성능이 각각 다를 경우 Least Connection: 연결이 제일 적은 서버에 요청을 전달합니다. Hash : 특정 사용자가 동일 서버에 연결이 필요할경우 사용합니다. DSR이 무엇인가요? 동영상 스트리밍과 같이 나가는 트래픽이 들어가는 트래픽보다 클 경우 모두 로드 밸런서를 거쳐야 하기 때문에 로드 밸런서가 병목지점이 될 수 있기 때문에 로드 밸런서를 거치지 않고 서버에서 직접 응답하는것을 의미합니다. GET과 POST 방식의 차이점? GET의 경우 요청하는 데이터가 URL에 그대로 붙어서 노출되기 때문에 보안에 취약합니다. 추가적으로 URL의 길이는 한정되어있습니다. 동일한 요청의 경우 캐싱됩니다. POST의 경우 request body 부분에 데이터가 담겨있으며 암호화를 한다면 GET보다 보안이 좋습니다. CORS 문제를겪은적 있나요? 네. 동일한 하드웨어에서 프론트엔드와 백엔드를 둘다 실행시켰을 때 프론트엔드에서 백엔드로 요청을 하는경우 흔히 발생했습니다. 왜 문제가 일어나는건가요? 서로 다른 도메인간 정보를 공유하는것을 브라우저에서 보안적으로 막기 때문입니다. 프록시 또는 애플리케이션 코드에 CORS 설정을 열어두는 방식으로 해결 가능합니다. NGINX또는 APACHE는 어떤 계층인가요 HTTP웹서버들은 애플리케이션 레이어이며 HTTP는 TCP/IP 프로토콜을 이용하기 때문에 4계층입니다.]]></summary></entry><entry><title type="html">CS 면접대비 - 객체지향 프로그래밍</title><link href="http://localhost:4000/interview/ms_oop1/" rel="alternate" type="text/html" title="CS 면접대비 - 객체지향 프로그래밍" /><published>2024-01-24T12:00:00+09:00</published><updated>2024-01-24T12:00:00+09:00</updated><id>http://localhost:4000/interview/ms_oop1</id><content type="html" xml:base="http://localhost:4000/interview/ms_oop1/"><![CDATA[<details><summary>객체 지향 프로그래밍이 무엇인가요?</summary><div>

    <ul>
      <li>개념의 추상화에 대응하는 데이터와 코드를 보유할 수 있는 “객체” 와 그 객체간의 상호작용을 통해 프로그램을 작성하는 방법론</li>
    </ul>

  </div></details>

<details><summary>객체지향 프로그래밍의 장점이 무엇인가요?</summary><div>

    <ul>
      <li>
        <p>코드 재사용이 용이
남이 만든 클래스를 가져와서 이용할 수 있고 상속을 통해 확장해서 사용할 수 있다.
_ 전형적인 절차형 언어들도 함수를 가져오면 재사용할 수 있는것 아닌가요?
_ 재사용을 위해서 상속을 사용하는건가요?</p>
      </li>
      <li>
        <p>유지보수가 쉬움
절차 지향 프로그래밍에서는 코드를 수정해야할 때 일일이 찾아 수정해야하는 반면 객체 지향 프로그래밍에서는 수정해야 할 부분이 클래스 내부에 멤버 변수혹은 메서드로 존재하기 때문에 해당 부분만 수정하면 된다.</p>
      </li>
      <li>
        <p>대형 프로젝트에 적합
클래스 단위로 모듈화시켜서 개발할 수 있으므로 대형 프로젝트처럼 여러 명, 여러 회사에서 프로젝트를 개발할 때 업무 분담하기 쉽다.</p>
      </li>
      <li>
        <p>개인적으로는, 도메인을 객체라는 추상화로 보는것이 설계에 굉장히 유용하다고 생각함</p>
      </li>
    </ul>

  </div></details>

<details><summary>클래스와 인스턴스의 차이는 무엇인가요?</summary><div>

    <ul>
      <li>
        <p>플라톤의 이데아와 유사하게 추상화를 거쳐 데이터와 코드로 정의한것</p>
      </li>
      <li>
        <p>인스턴스는 클래스를 바탕으로 실제 메모리에 할당된 객체를 의미</p>
      </li>
    </ul>

  </div></details>

<details><summary>추상화란 무엇인가요?</summary><div>

    <ul>
      <li>
        <p>여러 클래스에서 사용하는 공통된 메소드, 혹은 요소들을 공통으로 묶어내서 규칙만 빼내는 행위?</p>
      </li>
      <li>
        <p>추상화란 어떤 양상, 세부사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로
생략하거나 감춤으로써 복잡도를 극복하는 방법이다</p>
      </li>
      <li>
        <p>추상화가 꼭 클래스에만 적용되는가?</p>
        <ul>
          <li>꼭 추상 클래스나 인터페이스를 통해서만 추상화가 가능한가?</li>
        </ul>
      </li>
    </ul>

  </div></details>

<details><summary>캡슐화란 무엇인가요?</summary><div>

    <ul>
      <li>변경될 가능성이 높은 부분을 객체 내부로 숨기는 추상화의 한 종류
        <ul>
          <li>왜? 변경될 가능성이 높은 부분을 숨긴다면 “수정의 전파”가 이루어지지않음</li>
          <li>메시지와 인터페이스 의존 원칙과도 연관됨</li>
          <li>불안정한 = 변경이 잦은 구현 세부사항을 안정적인 인터페이스 뒤로 캡슐화</li>
        </ul>
      </li>
      <li>캡슐화를 저해하면 무엇이 안좋은가?
        <ul>
          <li>애초에 캡슐화가 무엇인가?
            <ul>
              <li>객체의 행위와 필요한 상태를 하나의 클래스에 응집시키는것, 외부에서 알 수 없게 하는 것</li>
            </ul>
          </li>
          <li>지키지 않는다면 무엇이 나쁜가?
            <ul>
              <li>내부 구현이 퍼블릭 인터페이스에 노출되게 된다</li>
              <li>내부 구현의 변경이 외부 클라이언트로 전파된다 - 확장에 적합하지 않은 설계</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

  </div></details>

<details><summary>객체의 책임이란?</summary><div>

    <ul>
      <li>객체의 존재이유 = 협력에 참여 ⇒ 협력에 필요한 행동을 제공해야 함</li>
      <li>
        <p>객체는 상태가 아닌 행동을 통해 다른 객체와 협력</p>
      </li>
      <li>객체의 상태를 먼저 결정하고 상태에 필요한 행동을 정하는것은 캡슐화를 저해한다</li>
    </ul>

  </div></details>

<details><summary>객체의 협력이란?</summary><div>

    <ul>
      <li>객체들이 애플리케이션의 기능을 구현하기 위해 수행하는 상호작용</li>
    </ul>

  </div></details>

<details><summary>객체의 역할이란?</summary><div>

    <ul>
      <li>객체가 어떤 특정한 협력 안에서 수행하는 책임의 집합을 역할이라고 부른다.
        <ul>
          <li>책임의 추상화</li>
        </ul>
      </li>
      <li><strong>역할에게 책임을 할당하라</strong></li>
      <li>사용하면 “유연하고 재사용 가능한 협력”을 얻을 수 있다 - 동일한 <strong>책임</strong>을 수행하는 객체를 <strong>추상화</strong> 하여 하나의 <strong>역할</strong>로 만든다</li>
    </ul>

  </div></details>]]></content><author><name></name></author><category term="Interview" /><category term="면접" /><category term="객체지향" /><summary type="html"><![CDATA[객체 지향 프로그래밍이 무엇인가요? 개념의 추상화에 대응하는 데이터와 코드를 보유할 수 있는 “객체” 와 그 객체간의 상호작용을 통해 프로그램을 작성하는 방법론 객체지향 프로그래밍의 장점이 무엇인가요? 코드 재사용이 용이 남이 만든 클래스를 가져와서 이용할 수 있고 상속을 통해 확장해서 사용할 수 있다. _ 전형적인 절차형 언어들도 함수를 가져오면 재사용할 수 있는것 아닌가요? _ 재사용을 위해서 상속을 사용하는건가요? 유지보수가 쉬움 절차 지향 프로그래밍에서는 코드를 수정해야할 때 일일이 찾아 수정해야하는 반면 객체 지향 프로그래밍에서는 수정해야 할 부분이 클래스 내부에 멤버 변수혹은 메서드로 존재하기 때문에 해당 부분만 수정하면 된다. 대형 프로젝트에 적합 클래스 단위로 모듈화시켜서 개발할 수 있으므로 대형 프로젝트처럼 여러 명, 여러 회사에서 프로젝트를 개발할 때 업무 분담하기 쉽다. 개인적으로는, 도메인을 객체라는 추상화로 보는것이 설계에 굉장히 유용하다고 생각함 클래스와 인스턴스의 차이는 무엇인가요? 플라톤의 이데아와 유사하게 추상화를 거쳐 데이터와 코드로 정의한것 인스턴스는 클래스를 바탕으로 실제 메모리에 할당된 객체를 의미 추상화란 무엇인가요? 여러 클래스에서 사용하는 공통된 메소드, 혹은 요소들을 공통으로 묶어내서 규칙만 빼내는 행위? 추상화란 어떤 양상, 세부사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법이다 추상화가 꼭 클래스에만 적용되는가? 꼭 추상 클래스나 인터페이스를 통해서만 추상화가 가능한가? 캡슐화란 무엇인가요? 변경될 가능성이 높은 부분을 객체 내부로 숨기는 추상화의 한 종류 왜? 변경될 가능성이 높은 부분을 숨긴다면 “수정의 전파”가 이루어지지않음 메시지와 인터페이스 의존 원칙과도 연관됨 불안정한 = 변경이 잦은 구현 세부사항을 안정적인 인터페이스 뒤로 캡슐화 캡슐화를 저해하면 무엇이 안좋은가? 애초에 캡슐화가 무엇인가? 객체의 행위와 필요한 상태를 하나의 클래스에 응집시키는것, 외부에서 알 수 없게 하는 것 지키지 않는다면 무엇이 나쁜가? 내부 구현이 퍼블릭 인터페이스에 노출되게 된다 내부 구현의 변경이 외부 클라이언트로 전파된다 - 확장에 적합하지 않은 설계 객체의 책임이란? 객체의 존재이유 = 협력에 참여 ⇒ 협력에 필요한 행동을 제공해야 함 객체는 상태가 아닌 행동을 통해 다른 객체와 협력 객체의 상태를 먼저 결정하고 상태에 필요한 행동을 정하는것은 캡슐화를 저해한다 객체의 협력이란? 객체들이 애플리케이션의 기능을 구현하기 위해 수행하는 상호작용 객체의 역할이란? 객체가 어떤 특정한 협력 안에서 수행하는 책임의 집합을 역할이라고 부른다. 책임의 추상화 역할에게 책임을 할당하라 사용하면 “유연하고 재사용 가능한 협력”을 얻을 수 있다 - 동일한 책임을 수행하는 객체를 추상화 하여 하나의 역할로 만든다]]></summary></entry><entry><title type="html">CS 면접대비 - 운영체제</title><link href="http://localhost:4000/interview/ms_os1/" rel="alternate" type="text/html" title="CS 면접대비 - 운영체제" /><published>2024-01-24T12:00:00+09:00</published><updated>2024-01-24T12:00:00+09:00</updated><id>http://localhost:4000/interview/ms_os1</id><content type="html" xml:base="http://localhost:4000/interview/ms_os1/"><![CDATA[<details><summary>프로세스와 스레드의 차이는?</summary><div>

    <ul>
      <li>개념의 추상화에 대응하는 데이터와 코드를 보유할 수 있는 “객체” 와 그 객체간의 상호작용을 통해 프로그램을 작성하는 방법론</li>
    </ul>

  </div></details>

<details><summary>프로그램이란?</summary><div>

    <ul>
      <li><strong>프로그램이란 디스크에 저장되어있는 실행가능한 파일로</strong>, 코드 또는 명령어들의 집합이 담겨져있습니다.<br />
프로그램을 실행하면, 디스크에 있는 명령어들은 메모리에 로드되고 이것을 <strong>프로세스</strong> 라고 부릅니다.</li>
    </ul>

  </div></details>

<details><summary>프로세스는 무엇을 갖고있나요?</summary><div>

    <ul>
      <li>프로세스는 프로그램을 실행시키기 위해서 코드/데이터/힙/스택의 메모리 구조로 구성되어 있습니다.<br />
프로세스는 서로 <strong>격리</strong>되어있다는것이 핵심입니다.<br />
개별적인 메모리 공간을 할당받으며, 하나가 불량으로 인해 실패하더라도 다른 프로세스에 영향을 주지 않습니다.<br />
예를 들면, 크롬과 워드를 동시에 실행하다 워드가 오작동으로 종료되더라도 크롬에는 영향을 주지 않습니다.</li>
    </ul>

  </div></details>

<details><summary>스레드는 무엇인가요?</summary><div>

    <ul>
      <li>스레드란 프로세스 내부의 실행 단위입니다.<br />
여러개의 스레드가 동시에 하나의 프로세스를 실행시키기 때문에 인터넷 브라우저에서 동영상을 보면서 동시에 파일을 다운로드하는것이 가능합니다.<br />
개별적인 스택 영역을 가짐으로서 독립적인 실행 환경을 갖지만,<br />
스레드끼리 코드, 데이터, 힙 세가지 영역은 공유합니다.</li>
    </ul>

  </div></details>

<details><summary>멀티스레딩과 멀티프로세싱의 차이점은 그러면 무엇인가요? 어떤게 더 빠를까요?</summary><div>

    <ul>
      <li>결국 멀티스레딩이라는건 하나의 프로세스 안에서 수행하는 병렬 작업이고,<br />
멀티프로세싱은 여러개의 프로세스들을 별도의 프로세스에서 병렬로 수행하는것이다<br />
둘간의 속도를 직접적으로 비교하는것은 의미가 없다. 결국 요구사항의 환경 차이로부터 속도의 차이는 발생한다.<br />
둘의 차이를 생각해보자. 스레드들은 힙 메모리 영역을 공유하는것이 주요한 차이이다.</li>
    </ul>

  </div></details>

<details><summary>인터럽트는 무엇인가요? 왜 일어나나요?</summary><div>

    <ul>
      <li>CPU가 연산을 하는 중 IO 또는 예외상황 발생으로 인해 우선적인 처리가 필요하다는것을 알리는걸 의미합니다.<br />
인터럽트가 필요한 이유는 IO 과정이 연산보다 매우 느리기 때문입니다.<br />
만약 인터럽트가 없다면, CPU는 계속해서 해당 디바이스를 지켜봐야 할 것입니다.<br />
Blocking / Non-Blocking과 연관지어도 좋습니다.<br />
인터럽트를 일종의 콜백으로 본다면, NonBlocking Async 의 형태가 되는것이고<br />
없다면 Blocking Sync의 형태가 될 것입니다.</li>
    </ul>

  </div></details>

<details><summary>동시성(Concurrency) 와 병렬성(Parallelism)에 대해서 설명해주세요?</summary><div>

    <ul>
      <li>병렬성은 여러개의 물리적인 하드웨어에서 여러개의 작업을 동시에 처리하는것이고,<br />
동시성은 하나의 하드웨어에서 여러개의 프로그램들을 동시에 수행하는것 처럼 보인다</li>
    </ul>

  </div></details>

<details><summary>그렇다면 싱글코어 컴퓨터에서 어떻게 멀티프로세싱을 수행하나요?</summary><div>

    <ul>
      <li>하나의 프로세서가 존재하더라도 짧은 time slice 안에 여러개의 프로세스를 번갈아가면서 수행하면 우리에게는 동시에 여러개의 프로세스가 수행되는것처럼 보인다.</li>
    </ul>

  </div></details>

<details><summary>하나의 프로세스에서 다른 프로세스로 어떻게 전환할 수 있나요?</summary><div>

    <ul>
      <li>짧은 시간 안에 프로세스를 전환하기 위해서는 상태를 보존하는 자료구조가 필요한데, 이를 PCB(Process Controll Block) 이라고 부르며, 전환하는 행위를 Context Switching 이라고 부른다.</li>
    </ul>

    <p>PCB 내부에는 프로세스의 상태를 저장하는 다양한 정보가 들어있습니다 (program counter, register, pid, …)</p>

    <p>해당 PCB를 이용해 다른 프로세스로 전환하고 다시 돌아왔을 때 프로세스의 상태를 복구시켜준다</p>

  </div></details>

<details><summary>Context Switch 가 그러면 어떨 때 일어나나요?</summary><div>

    <ul>
      <li>배정된 time slice가 만료되거나, 프로세스의 상태를 변경시키는 IO작업의 대기, 또는 우선순위가 높은 작업의 출현 등으로 인해 일어날 수 있습니다</li>
    </ul>
  </div></details>

<details><summary>Context Switch가 일어나면 현재 상태는 어떻게 저장되나요?</summary><div>

    <ul>
      <li><a href="https://stackoverflow.com/a/68055967">https://stackoverflow.com/a/68055967</a></li>
    </ul>

    <p>프로세스의 진행 중 스위칭이 일어날 경우 현재의 실행 컨텍스트는 (프로세스의 상태나 프로그램 카운터) 커널 스택에 저장됩니다 PID등 프로세스에 관련된 정보는 PCB에 저장됩니다</p>

    <ul>
      <li>PCB와 커널 스택 둘다 Context Switch 시에 필요한 정보를 담고 있다.
어떤 값을 들고있는지는 OS마다 다르고, 정확하게 정할 수는 없다.</li>
      <li>PCB는 일반적으로 Kernel Stack 내부에 존재한다</li>
    </ul>

  </div></details>

<details><summary>그렇다면 스레드에도 PCB가 존재하나요?</summary><div>

    <ul>
      <li>
        <p><a href="https://stackoverflow.com/a/68055967">https://stackoverflow.com/a/68055967</a></p>
      </li>
      <li>
        <p>PCB의 명칭상 스레드에 PCB가 존재한다고는 말할 수 없지만, TCB라는 유사한 저장소가 존재한다<br />
PCB와 유사하게 stack pointer, register 등 TCB에도 스레드의 상태를 기록하는 정보들이 존재하며, 프로세스보다는 작은 규모이다.</p>
      </li>
    </ul>

  </div></details>

<details><summary>Kernel Level Thread 와 User Level Thread 의 차이는 무엇인가요?</summary><div>

    <p><a href="https://stackoverflow.com/a/59634931">https://stackoverflow.com/a/59634931</a></p>

    <p>인터넷에 정확한 설명이 매우 부족한 부분인데, 간혹 나오는것같아 첨부한다<br />
Kernel을 동작시키는 스레드 != Kernel 스레드<br />
원점으로 돌아가보자. 하나의 코어를 갖고 있는 시스템에서 커널은 어떤 작업을 하는가?<br />
여러개의 스레드가 연속적으로 context switching을 수행해주는걸 관리해준다.<br />
Kernel 스레드는 어디까지나 이 개념을 조금 확장한것일뿐이다.</p>

    <p>하나의 프로세스는 하나의 커널 스레드를 보유한 상태에서 시작한다. 즉, 싱글 스레드 앱이라면 모든 작업이 커널 스레드에서 수행된다. 당연하게도 PCB는 여기서 관리한다</p>

    <p>하지만 프로세스를 여러개의 유저 스레드라는 일종의 유사 스레드로 실행될 수 있다.<br />
일반적으로 라이브러리 등을 통해 생성되는 유저 스레드는 OS에서 관리하는 실제 스레드와는 다른 유사 스레드이다. 해당 유저 스레드의 스케쥴링은 라이브러리의 정책에 따라 관리되며 커널은 해당 프로세스의 분기에 대해서 전혀 알지 못한다 (하나의 프로세스로 볼 뿐)</p>

  </div></details>

<hr />

<h1 id="운영체제--ipc">운영체제 / IPC</h1>

<details><summary>IPC에 대해서 설명해주세요</summary><div>

    <p>프로세스는 서로 격리되어있기 때문에 스레드와 같이 힙, 코드, 데이터 영역등을 공유하는 방식으로 소통할 수 없습니다.<br />
따라서 별도의 통신 메커니즘을 이용하는데, 이것을 IPC라고 부릅니다.<br />
아래와 같이 로컬 통신 방식</p>

    <ul>
      <li>Pipe를 이용한 Message passing
        <ul>
          <li>단방향 통신만 가능한 익명 파이프
            <ul>
              <li>양방향 통신을 위해서는 두개의 파이프 (read - write)전용 파이프를 만들어야 한다</li>
            </ul>
          </li>
          <li>양방향 통신이 가능한 명명 파이프</li>
        </ul>
      </li>
      <li>
        <p>공유 메모리 사용</p>

        <ul>
          <li>파이프만으로 해결할 수 없는 경우 사용</li>
          <li>동시성 문제를 주의해야 함</li>
        </ul>
      </li>
    </ul>

    <p>또는 네트워크 통신 방식인</p>

    <ul>
      <li>소켓 통신</li>
      <li>RPC
        <ul>
          <li>Remote Procedure Call
            <ul>
              <li>클라이언트에서 서버에 위치한 프로시저를 호출할 수 있게 하는 프로토콜</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

    <p>등이 있습니다.</p>

  </div></details>

<details><summary>프로세스 스케쥴링 알고리즘에는 뭐가 있나요?</summary><div>

    <ul>
      <li>
        <p>가장 단순한 FIFO부터 설명드리겠습니다.
먼저 들어온 작업이 먼저 끝나는 형식의 FIFO는 단순하지만, Convoy Effect라는<br />
오래 걸리는 프로세스가 앞에서 점유하고 있을 경우, 뒤 작업들의 처리시간이 늘어나는 문제가 있습니다.<br />
이것을 극복하기 위해서 Shortest Job First 라는 가장 짧은 시간이 걸리는 프로세스를 먼저 처리하는<br />
방법이 존재하지만 역시 starvation 문제가 있습니다.</p>
      </li>
      <li>
        <p>이 문제들을 해결하기 위해서 프로세스를 중간에 가로채는 선점 스케쥴링 방식이 등장합니다.<br />
예시로 Round robin이 있지만, 이 경우 또한 Context Switching 비용을 신경써야 합니다.</p>
      </li>
    </ul>

  </div></details>

<details><summary>데드락에 대해서 설명해주세요</summary><div>

    <ul>
      <li>두개 이상의 프로세스나 스레드가 서로 자원을 얻지 못해서 다음 처리를 못하는 상태를 의미합니다.<br />
예를 들어 A와 B가 두개의 종이에 쓰여 있는 숫자 두개를 더하고 싶을 때,<br />
A가 종이1을 얻고 B가 종이2를 얻었을 때 서로 다른 종이를 얻기 위해 기다리는 상황입니다.</li>
    </ul>

  </div></details>

<details><summary>경쟁 상태에 대해서 설명해주세요</summary><div>

    <ul>
      <li>공유 자원에 대해서 두개 이상의 프로세스나 스레드가 접근할 때 생길 수 있는 문제를 의미합니다.
덧셈 코드가 load/add/store로 나뉘어 있는것을 생각하면 설명하기 좋습니다.<br />
경쟁 상태를 해결할 수 있는 방법으로 Mutual Exclusion이 있는데, 이것은 데드락의 발생조건 중 하나입니다.</li>
    </ul>

  </div></details>

<details><summary>Mutex와 Semaphore</summary><div>

    <ul>
      <li>경쟁상태를 해결하기 위해서 일종의 락을 데이터에 걸어주는 것입니다.<br />
화장실과 화장실 키를 생각해볼 수 있습니다.<br />
하나의 프로세스가 Mutex를 보유했을 때, 다른 프로세스는 접근할 수 없습니다.<br />
세마포어는 이것의 확장입니다.<br />
P(S)로 Semaphore를 감소시키면 busy waiting 하거나 대기 큐로 옮기고
V(S)로 Semaphore를 증가시키면 대기 큐에서 P를 꺼내 실행시킵니다</li>
    </ul>

  </div></details>

<hr />

<h1 id="파일-시스템">파일 시스템</h1>

<details><summary>파일 시스템이란 무엇인가요?</summary><div>

    <ul>
      <li>디스크에 접근하는것을 OS 레벨에서 추상화한 것입니다.</li>
    </ul>

  </div></details>

<details><summary>프로세스에서 파일을 어떻게 읽나요?</summary><div>

    <ul>
      <li>디스크에 접근하는것을 OS 레벨에서 추상화한 것입니다.</li>
    </ul>

    <ol>
      <li>파일 열람을 위한 시스템 콜이 호출됩니다.</li>
    </ol>

    <ul>
      <li>파일의 경로와 읽기 모드를 명시하면 운영체제에서 파일 open 시스템 콜을 호출합니다.</li>
      <li>파일을 성공적으로 읽었을 경우, file descriptor 가 반환됩니다.
        <ul>
          <li>file descriptor란 현재 열려있는 파일의 식별자로 사용되는 정수값입니다.</li>
        </ul>
      </li>
      <li>파일 내용을 읽기 위해서 read 시스템 콜이 호출됩니다.<br />
읽은 내용은 버퍼로 옮겨집니다.</li>
      <li>파일 시스템을 통해서 저장장치에 있는 정보를 읽고, 프로세스의 메모리로 복사됩니다.</li>
      <li>읽은 파일의 총 바이트 수를 반환합니다.</li>
      <li>close 시스템 콜을 날려 파일을 닫습니다.</li>
    </ul>

  </div></details>

<hr />

<h1 id="페이지">페이지</h1>

<details><summary>페이징이 왜 필요한가요?</summary><div>

  </div></details>]]></content><author><name></name></author><category term="Interview" /><category term="면접" /><summary type="html"><![CDATA[프로세스와 스레드의 차이는? 개념의 추상화에 대응하는 데이터와 코드를 보유할 수 있는 “객체” 와 그 객체간의 상호작용을 통해 프로그램을 작성하는 방법론 프로그램이란? 프로그램이란 디스크에 저장되어있는 실행가능한 파일로, 코드 또는 명령어들의 집합이 담겨져있습니다. 프로그램을 실행하면, 디스크에 있는 명령어들은 메모리에 로드되고 이것을 프로세스 라고 부릅니다. 프로세스는 무엇을 갖고있나요? 프로세스는 프로그램을 실행시키기 위해서 코드/데이터/힙/스택의 메모리 구조로 구성되어 있습니다. 프로세스는 서로 격리되어있다는것이 핵심입니다. 개별적인 메모리 공간을 할당받으며, 하나가 불량으로 인해 실패하더라도 다른 프로세스에 영향을 주지 않습니다. 예를 들면, 크롬과 워드를 동시에 실행하다 워드가 오작동으로 종료되더라도 크롬에는 영향을 주지 않습니다. 스레드는 무엇인가요? 스레드란 프로세스 내부의 실행 단위입니다. 여러개의 스레드가 동시에 하나의 프로세스를 실행시키기 때문에 인터넷 브라우저에서 동영상을 보면서 동시에 파일을 다운로드하는것이 가능합니다. 개별적인 스택 영역을 가짐으로서 독립적인 실행 환경을 갖지만, 스레드끼리 코드, 데이터, 힙 세가지 영역은 공유합니다. 멀티스레딩과 멀티프로세싱의 차이점은 그러면 무엇인가요? 어떤게 더 빠를까요? 결국 멀티스레딩이라는건 하나의 프로세스 안에서 수행하는 병렬 작업이고, 멀티프로세싱은 여러개의 프로세스들을 별도의 프로세스에서 병렬로 수행하는것이다 둘간의 속도를 직접적으로 비교하는것은 의미가 없다. 결국 요구사항의 환경 차이로부터 속도의 차이는 발생한다. 둘의 차이를 생각해보자. 스레드들은 힙 메모리 영역을 공유하는것이 주요한 차이이다. 인터럽트는 무엇인가요? 왜 일어나나요? CPU가 연산을 하는 중 IO 또는 예외상황 발생으로 인해 우선적인 처리가 필요하다는것을 알리는걸 의미합니다. 인터럽트가 필요한 이유는 IO 과정이 연산보다 매우 느리기 때문입니다. 만약 인터럽트가 없다면, CPU는 계속해서 해당 디바이스를 지켜봐야 할 것입니다. Blocking / Non-Blocking과 연관지어도 좋습니다. 인터럽트를 일종의 콜백으로 본다면, NonBlocking Async 의 형태가 되는것이고 없다면 Blocking Sync의 형태가 될 것입니다. 동시성(Concurrency) 와 병렬성(Parallelism)에 대해서 설명해주세요? 병렬성은 여러개의 물리적인 하드웨어에서 여러개의 작업을 동시에 처리하는것이고, 동시성은 하나의 하드웨어에서 여러개의 프로그램들을 동시에 수행하는것 처럼 보인다 그렇다면 싱글코어 컴퓨터에서 어떻게 멀티프로세싱을 수행하나요? 하나의 프로세서가 존재하더라도 짧은 time slice 안에 여러개의 프로세스를 번갈아가면서 수행하면 우리에게는 동시에 여러개의 프로세스가 수행되는것처럼 보인다. 하나의 프로세스에서 다른 프로세스로 어떻게 전환할 수 있나요? 짧은 시간 안에 프로세스를 전환하기 위해서는 상태를 보존하는 자료구조가 필요한데, 이를 PCB(Process Controll Block) 이라고 부르며, 전환하는 행위를 Context Switching 이라고 부른다. PCB 내부에는 프로세스의 상태를 저장하는 다양한 정보가 들어있습니다 (program counter, register, pid, …) 해당 PCB를 이용해 다른 프로세스로 전환하고 다시 돌아왔을 때 프로세스의 상태를 복구시켜준다 Context Switch 가 그러면 어떨 때 일어나나요? 배정된 time slice가 만료되거나, 프로세스의 상태를 변경시키는 IO작업의 대기, 또는 우선순위가 높은 작업의 출현 등으로 인해 일어날 수 있습니다 Context Switch가 일어나면 현재 상태는 어떻게 저장되나요? https://stackoverflow.com/a/68055967 프로세스의 진행 중 스위칭이 일어날 경우 현재의 실행 컨텍스트는 (프로세스의 상태나 프로그램 카운터) 커널 스택에 저장됩니다 PID등 프로세스에 관련된 정보는 PCB에 저장됩니다 PCB와 커널 스택 둘다 Context Switch 시에 필요한 정보를 담고 있다. 어떤 값을 들고있는지는 OS마다 다르고, 정확하게 정할 수는 없다. PCB는 일반적으로 Kernel Stack 내부에 존재한다 그렇다면 스레드에도 PCB가 존재하나요? https://stackoverflow.com/a/68055967 PCB의 명칭상 스레드에 PCB가 존재한다고는 말할 수 없지만, TCB라는 유사한 저장소가 존재한다 PCB와 유사하게 stack pointer, register 등 TCB에도 스레드의 상태를 기록하는 정보들이 존재하며, 프로세스보다는 작은 규모이다. Kernel Level Thread 와 User Level Thread 의 차이는 무엇인가요? https://stackoverflow.com/a/59634931 인터넷에 정확한 설명이 매우 부족한 부분인데, 간혹 나오는것같아 첨부한다 Kernel을 동작시키는 스레드 != Kernel 스레드 원점으로 돌아가보자. 하나의 코어를 갖고 있는 시스템에서 커널은 어떤 작업을 하는가? 여러개의 스레드가 연속적으로 context switching을 수행해주는걸 관리해준다. Kernel 스레드는 어디까지나 이 개념을 조금 확장한것일뿐이다. 하나의 프로세스는 하나의 커널 스레드를 보유한 상태에서 시작한다. 즉, 싱글 스레드 앱이라면 모든 작업이 커널 스레드에서 수행된다. 당연하게도 PCB는 여기서 관리한다 하지만 프로세스를 여러개의 유저 스레드라는 일종의 유사 스레드로 실행될 수 있다. 일반적으로 라이브러리 등을 통해 생성되는 유저 스레드는 OS에서 관리하는 실제 스레드와는 다른 유사 스레드이다. 해당 유저 스레드의 스케쥴링은 라이브러리의 정책에 따라 관리되며 커널은 해당 프로세스의 분기에 대해서 전혀 알지 못한다 (하나의 프로세스로 볼 뿐) 운영체제 / IPC IPC에 대해서 설명해주세요 프로세스는 서로 격리되어있기 때문에 스레드와 같이 힙, 코드, 데이터 영역등을 공유하는 방식으로 소통할 수 없습니다. 따라서 별도의 통신 메커니즘을 이용하는데, 이것을 IPC라고 부릅니다. 아래와 같이 로컬 통신 방식 Pipe를 이용한 Message passing 단방향 통신만 가능한 익명 파이프 양방향 통신을 위해서는 두개의 파이프 (read - write)전용 파이프를 만들어야 한다 양방향 통신이 가능한 명명 파이프 공유 메모리 사용 파이프만으로 해결할 수 없는 경우 사용 동시성 문제를 주의해야 함 또는 네트워크 통신 방식인 소켓 통신 RPC Remote Procedure Call 클라이언트에서 서버에 위치한 프로시저를 호출할 수 있게 하는 프로토콜 등이 있습니다. 프로세스 스케쥴링 알고리즘에는 뭐가 있나요? 가장 단순한 FIFO부터 설명드리겠습니다. 먼저 들어온 작업이 먼저 끝나는 형식의 FIFO는 단순하지만, Convoy Effect라는 오래 걸리는 프로세스가 앞에서 점유하고 있을 경우, 뒤 작업들의 처리시간이 늘어나는 문제가 있습니다. 이것을 극복하기 위해서 Shortest Job First 라는 가장 짧은 시간이 걸리는 프로세스를 먼저 처리하는 방법이 존재하지만 역시 starvation 문제가 있습니다. 이 문제들을 해결하기 위해서 프로세스를 중간에 가로채는 선점 스케쥴링 방식이 등장합니다. 예시로 Round robin이 있지만, 이 경우 또한 Context Switching 비용을 신경써야 합니다. 데드락에 대해서 설명해주세요 두개 이상의 프로세스나 스레드가 서로 자원을 얻지 못해서 다음 처리를 못하는 상태를 의미합니다. 예를 들어 A와 B가 두개의 종이에 쓰여 있는 숫자 두개를 더하고 싶을 때, A가 종이1을 얻고 B가 종이2를 얻었을 때 서로 다른 종이를 얻기 위해 기다리는 상황입니다. 경쟁 상태에 대해서 설명해주세요 공유 자원에 대해서 두개 이상의 프로세스나 스레드가 접근할 때 생길 수 있는 문제를 의미합니다. 덧셈 코드가 load/add/store로 나뉘어 있는것을 생각하면 설명하기 좋습니다. 경쟁 상태를 해결할 수 있는 방법으로 Mutual Exclusion이 있는데, 이것은 데드락의 발생조건 중 하나입니다. Mutex와 Semaphore 경쟁상태를 해결하기 위해서 일종의 락을 데이터에 걸어주는 것입니다. 화장실과 화장실 키를 생각해볼 수 있습니다. 하나의 프로세스가 Mutex를 보유했을 때, 다른 프로세스는 접근할 수 없습니다. 세마포어는 이것의 확장입니다. P(S)로 Semaphore를 감소시키면 busy waiting 하거나 대기 큐로 옮기고 V(S)로 Semaphore를 증가시키면 대기 큐에서 P를 꺼내 실행시킵니다 파일 시스템 파일 시스템이란 무엇인가요? 디스크에 접근하는것을 OS 레벨에서 추상화한 것입니다. 프로세스에서 파일을 어떻게 읽나요? 디스크에 접근하는것을 OS 레벨에서 추상화한 것입니다. 파일 열람을 위한 시스템 콜이 호출됩니다. 파일의 경로와 읽기 모드를 명시하면 운영체제에서 파일 open 시스템 콜을 호출합니다. 파일을 성공적으로 읽었을 경우, file descriptor 가 반환됩니다. file descriptor란 현재 열려있는 파일의 식별자로 사용되는 정수값입니다. 파일 내용을 읽기 위해서 read 시스템 콜이 호출됩니다. 읽은 내용은 버퍼로 옮겨집니다. 파일 시스템을 통해서 저장장치에 있는 정보를 읽고, 프로세스의 메모리로 복사됩니다. 읽은 파일의 총 바이트 수를 반환합니다. close 시스템 콜을 날려 파일을 닫습니다. 페이지 페이징이 왜 필요한가요?]]></summary></entry></feed>